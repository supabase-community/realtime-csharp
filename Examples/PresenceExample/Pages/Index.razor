@page "/"
@using Newtonsoft.Json;
@using PresenceExample.Components;
@using PresenceExample.Models;
@using Supabase.Realtime;
@using Supabase.Realtime.Models;
@using static Supabase.Realtime.Socket.SocketStateChangedEventArgs;
@inject IJSRuntime JS;
@inject Client realtime;
@inject Blazored.LocalStorage.ISyncLocalStorageService localStorage;

<PageTitle>Realtime Example</PageTitle>

<div class="flex justify-between">
	<div class="bg-gray-200 border border-scale-500 dark:border-scale-300 p-3 rounded-md space-y-8 transition-all max-h-[70px] duration-500 overflow-hidden shadow-2xl dark:shadow-lg">
		<a href="https://github.com/supabase-community/supabase-csharp">
			<img class="w-full md:w-48 h-full max-w-xs" src="/logo.png" />
		</a>
	</div>

	<a href="https://github.com/supabase-community/realtime-csharp/tree/master/Examples/PresenceExample">
		<img class="w-8 h-8" src="/github-mark-white.png" />
	</a>
</div>

<div class="flex items-start flex-col pt-2">
	<div class="my-1">
		<button @onclick="HandleConnectionButton" class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-opacity-50 bg-brand-700 text-brand-1100 border border-brand-700">
			@(userChannel?.IsJoined ?? false ? "Disconnect" : "Connect")
		</button>
	</div>
	@if ((realtime?.Socket?.IsConnected ?? false) && (userChannel?.IsJoined ?? false))
	{
		<Pill Text="@($"Online: {userCount}")" />
		<Pill Text="@($"{latency} ms")" />
	}
</div>

@foreach (var position in mousePositions)
{
	<Cursor Color="@position.Color" UserId="@position.UserId" MouseX="@position.MouseX" MouseY="@position.MouseY" />
}

<div class="flex flex-col gap-1 absolute bottom-24 right-5 justify-end items-end overflow-hidden">
	@foreach (var message in messages)
	{
		<Pill Text="@message.Content" Color="@message.Color" Size="md" />
	}
</div>

<div class="flex absolute bottom-10 right-5 w-3/4 md:w-1/3 h-10">
	<InputText @ref="chatInput"
			   @onfocus="HandleChatInputFocus"
			   @onfocusout="HandleChatInputLostFocus"
			   @bind-Value="chatMessage"
			   @oninput="@((e) => { chatMessage=(string?)e.Value ?? "";})"
			   placeholder="Send a message..."
			   type="text"
			   class="w-full bg-scale-500 h-10 rounded-lg px-2.5" />
</div>

@code {
	private bool isConnected = false;
	private double latency = -1;
	private int userCount = 0;
	private bool isTyping = false;

	private RealtimeChannel? userChannel;
	private RealtimeBroadcast<MousePosition>? mousePositionBroadcast;
	private RealtimePresence<BasePresence>? presence;

	private RealtimeChannel? messageChannel;
	private RealtimeBroadcast<Message>? messageBroadcast;

	private DotNetObjectReference<Index>? objRef;

	private InputText? chatInput;
	private string? chatMessage;

	private static Random rnd = new Random();

	private string? userColor;
	private string userId
	{
		get
		{
			var id = localStorage.GetItem<string?>("userId");
			if (string.IsNullOrEmpty(id))
			{
				id = Guid.NewGuid().ToString();
				localStorage.SetItem("userId", id);
			}

			return id!;
		}
	}

	private List<MousePosition> mousePositions = new List<MousePosition>();
	private List<Message> messages = new List<Message>();
	private List<string> colorOptions = new List<string> { "slate", "stone", "red", "orange", "amber", "yellow", "green", "blue", "indigo", "purple", "fuchsia", "pink", "rose" };

	override protected async Task OnInitializedAsync()
	{
		objRef = DotNetObjectReference.Create(this);

		await JS.InvokeAsync<double[]>("registerMouseMoveListener", objRef);
		await JS.InvokeAsync<KeydownEvent>("registerKeydownListener", objRef);

		realtime.AddStateChangedListener((_, state) => isConnected = state != Constants.SocketState.Close);

		await realtime.ConnectAsync();

		userColor = colorOptions[rnd.Next(colorOptions.Count)];

		InitializeUserChannel();
		InitializeMessageChannel();
		InitializeLatencyTimer();
		InitializeCleanupMousePositionsTimer();
	}

	public void Dispose()
	{
		objRef?.Dispose();
		userChannel?.Unsubscribe();
		messageChannel?.Unsubscribe();
	}

	[JSInvokable]
	public void HandleMouseMoved(double[] position)
	{
		mousePositionBroadcast?.Send(null, new MousePosition { UserId = userId, MouseX = position[0], MouseY = position[1], Color = userColor });
	}

	[JSInvokable]
	public void HandleKeydown(KeydownEvent keydownEvent)
	{
		switch (keydownEvent.key)
		{
			case "Enter":
				if (!isTyping)
					chatInput?.Element!.Value.FocusAsync();
				else
					SendMessage();
				break;
			case "Escape":
				chatMessage = "";
				StateHasChanged();
				break;
		}
	}

	private async void HandleConnectionButton(MouseEventArgs args)
	{
		if (userChannel == null) return;

		if (userChannel.IsJoined)
		{
			userChannel?.Unsubscribe();
		}
		else
		{
			await userChannel.Subscribe();
			presence!.Track(new BasePresence());
		}
		StateHasChanged();
	}

	/// <summary>
	/// Inits the user presence channel for mouse events
	/// </summary>
	private async void InitializeUserChannel()
	{
		userChannel = realtime.Channel("presence");

		mousePositionBroadcast = userChannel.Register<MousePosition>(true, true);
		mousePositionBroadcast.OnBroadcast += HandleMousePositionBroadcastReceived;

		presence = userChannel.Register<BasePresence>(userId!);
		presence.OnSync += HandlePresenceSync;

		await userChannel.Subscribe();

		presence!.Track(new BasePresence());
	}

	/// <summary>
	/// Inits the message channel for message broadcasts
	/// </summary>
	private async void InitializeMessageChannel()
	{
		messageChannel = realtime.Channel("messages");

		messageBroadcast = messageChannel.Register<Message>(true, true);
		messageBroadcast.OnBroadcast += HandleMessageBroadcastReceived;

		await messageChannel.Subscribe();
	}

	/// <summary>
	/// Removes old mousePositions after a set timeout.
	/// </summary>
	private void InitializeCleanupMousePositionsTimer()
	{
		var timer = new System.Timers.Timer();

		timer.Elapsed += (sender, elapsed) =>
		{
			mousePositions
				.FindAll(x => x.AddedAt < (DateTime.Now - TimeSpan.FromSeconds(15)))
				.ForEach(x => mousePositions.Remove(x));
			StateHasChanged();
		};

		timer.Interval = 15;
		timer.Enabled = true;
	}

	/// <summary>
	/// Sets repeating timer to show latency on screen.
	/// </summary>
	private void InitializeLatencyTimer()
	{
		var timer = new System.Timers.Timer();

		timer.Elapsed += async (sender, elapsed) =>
		{
			latency = await realtime.Socket!.GetLatency();
			presence!.Track(new BasePresence());
			StateHasChanged();
		};

		timer.Interval = 2000;
		timer.Enabled = true;
	}

	/// <summary>
	/// Keeps track of current count of users.
	/// </summary>
	/// <param name="sender"></param>
	/// <param name="args"></param>
	private void HandlePresenceSync(object? sender, EventArgs? args)
	{
		var state = presence!.CurrentState;
		userCount = state.Keys.Count;

		Console.WriteLine($"Online: {JsonConvert.SerializeObject(state.Keys)}");
		StateHasChanged();
	}

	/// <summary>
	/// Keeps track of the list of active users, updating positions if the user already exists.
	/// </summary>
	/// <param name="sender"></param>
	/// <param name="args"></param>
	private void HandleMousePositionBroadcastReceived(object? sender, EventArgs? args)
	{
		var item = mousePositionBroadcast?.Current();

		if (item == null) return;

		item.AddedAt = DateTime.Now;

		var index = mousePositions.FindIndex(x => x.UserId == item.UserId);

		if (index > -1)
			mousePositions[index] = item;
		else
			mousePositions.Add(item);

		StateHasChanged();
	}

	/// <summary>
	/// Keeps track of messages received.
	/// </summary>
	/// <param name="sender"></param>
	/// <param name="args"></param>
	private void HandleMessageBroadcastReceived(object? sender, EventArgs? args)
	{
		var item = messageBroadcast?.Current();

		if (item == null) return;

		messages.Add(item);
		messages.Sort((x, y) => x.CreatedAt >= y.CreatedAt ? 1 : -1);

		StateHasChanged();
	}

	/// <summary>
	/// Broadcast a message
	/// </summary>
	private void SendMessage()
	{
		if (string.IsNullOrEmpty(chatMessage)) return;

		messageBroadcast?.Send("message", new Message { UserId = userId, Color = userColor, Content = chatMessage, CreatedAt = DateTime.Now });
		chatMessage = "";
		StateHasChanged();
	}

	private void HandleChatInputFocus(FocusEventArgs args)
	{
		isTyping = true;
		StateHasChanged();
	}

	private void HandleChatInputLostFocus(FocusEventArgs args)
	{
		isTyping = false;
		StateHasChanged();
	}
}