{
  "api/Supabase.Realtime.Binding.html": {
    "href": "api/Supabase.Realtime.Binding.html",
    "title": "Class Binding | realtime-csharp",
    "summary": "Class Binding Namespace Supabase.Realtime Assembly Supabase.Realtime.dll public class Binding Inheritance object Binding Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Handler public IRealtimeChannel.PostgresChangesHandler? Handler { get; set; } Property Value IRealtimeChannel.PostgresChangesHandler Id public int? Id { get; set; } Property Value int? ListenType public PostgresChangesOptions.ListenType? ListenType { get; set; } Property Value PostgresChangesOptions.ListenType? Options public PostgresChangesOptions? Options { get; set; } Property Value PostgresChangesOptions"
  },
  "api/Supabase.Realtime.Broadcast.BroadcastOptions.html": {
    "href": "api/Supabase.Realtime.Broadcast.BroadcastOptions.html",
    "title": "Class BroadcastOptions | realtime-csharp",
    "summary": "Class BroadcastOptions Namespace Supabase.Realtime.Broadcast Assembly Supabase.Realtime.dll Options public class BroadcastOptions Inheritance object BroadcastOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BroadcastOptions(bool, bool) Initializes broadcast options public BroadcastOptions(bool broadcastSelf = false, bool broadcastAck = false) Parameters broadcastSelf bool broadcastAck bool Properties BroadcastAck ack option instructs server to acknowledge that broadcast message was received [JsonProperty(\"ack\")] public bool BroadcastAck { get; set; } Property Value bool BroadcastSelf self option enables client to receive message it broadcast [JsonProperty(\"self\")] public bool BroadcastSelf { get; set; } Property Value bool"
  },
  "api/Supabase.Realtime.Broadcast.html": {
    "href": "api/Supabase.Realtime.Broadcast.html",
    "title": "Namespace Supabase.Realtime.Broadcast | realtime-csharp",
    "summary": "Namespace Supabase.Realtime.Broadcast Classes BroadcastOptions Options"
  },
  "api/Supabase.Realtime.Channel.ChannelOptions.html": {
    "href": "api/Supabase.Realtime.Channel.ChannelOptions.html",
    "title": "Class ChannelOptions | realtime-csharp",
    "summary": "Class ChannelOptions Namespace Supabase.Realtime.Channel Assembly Supabase.Realtime.dll Channel Options public class ChannelOptions Inheritance object ChannelOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ChannelOptions(ClientOptions, Func<string?>, JsonSerializerSettings) The Channel Options (typically only called from within the Client) public ChannelOptions(ClientOptions clientOptions, Func<string?> retrieveAccessToken, JsonSerializerSettings serializerSettings) Parameters clientOptions ClientOptions retrieveAccessToken Func<string> serializerSettings JsonSerializerSettings Properties ClientOptions The Client Options public ClientOptions ClientOptions { get; } Property Value ClientOptions Parameters Parameters that are sent to the channel when opened (JSON Serializable) public Dictionary<string, string>? Parameters { get; set; } Property Value Dictionary<string, string> RetrieveAccessToken A function that returns the current access token. public Func<string?> RetrieveAccessToken { get; } Property Value Func<string> SerializerSettings The Serializer Settings public JsonSerializerSettings SerializerSettings { get; } Property Value JsonSerializerSettings"
  },
  "api/Supabase.Realtime.Channel.Push.html": {
    "href": "api/Supabase.Realtime.Channel.Push.html",
    "title": "Class Push | realtime-csharp",
    "summary": "Class Push Namespace Supabase.Realtime.Channel Assembly Supabase.Realtime.dll Class representation of a single request sent to the Socket server. Push also adds additional functionality for retrying, timeouts, and listeners for its associated response from the server. public class Push : IRealtimePush<RealtimeChannel, SocketResponse> Inheritance object Push Implements IRealtimePush<RealtimeChannel, SocketResponse> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Push(IRealtimeSocket, RealtimeChannel, string, string?, object?, int) Initializes a single request that will be Pushed to the Socket server. public Push(IRealtimeSocket socket, RealtimeChannel channel, string eventName, string? type = null, object? payload = null, int timeoutMs = 10000) Parameters socket IRealtimeSocket channel RealtimeChannel eventName string type string payload object timeoutMs int Properties Channel The associated channel. public RealtimeChannel Channel { get; } Property Value RealtimeChannel EventName The event requested. public string EventName { get; } Property Value string IsSent Flag representing the sent state of a request. public bool IsSent { get; } Property Value bool Message Represents the Pushed (sent) Message public SocketRequest? Message { get; } Property Value SocketRequest Payload Payload of data to be sent. public object? Payload { get; } Property Value object Ref Ref Of this Message public string? Ref { get; } Property Value string Response Accessor for the returned Socket Response public IRealtimeSocketResponse? Response { get; } Property Value IRealtimeSocketResponse Methods AddMessageReceivedHandler(MessageEventHandler) Adds a listener to be notified when a message is received. public void AddMessageReceivedHandler(IRealtimePush<RealtimeChannel, SocketResponse>.MessageEventHandler handler) Parameters handler IRealtimePush<RealtimeChannel, SocketResponse>.MessageEventHandler ClearMessageReceivedHandler() Clears all of the listeners from receiving event state changes. public void ClearMessageReceivedHandler() RemoveMessageReceivedHandler(MessageEventHandler) Removes a specified listener from messages received. public void RemoveMessageReceivedHandler(IRealtimePush<RealtimeChannel, SocketResponse>.MessageEventHandler handler) Parameters handler IRealtimePush<RealtimeChannel, SocketResponse>.MessageEventHandler Resend(int) Resends a Push request. public void Resend(int timeoutMs = 10000) Parameters timeoutMs int Send() Sends a Push request and initializes the Timeout. public void Send() Events OnTimeout Invoked when this Push has not been responded to within the timeout interval. public event EventHandler? OnTimeout Event Type EventHandler"
  },
  "api/Supabase.Realtime.Channel.html": {
    "href": "api/Supabase.Realtime.Channel.html",
    "title": "Namespace Supabase.Realtime.Channel | realtime-csharp",
    "summary": "Namespace Supabase.Realtime.Channel Classes ChannelOptions Channel Options Push Class representation of a single request sent to the Socket server. Push also adds additional functionality for retrying, timeouts, and listeners for its associated response from the server."
  },
  "api/Supabase.Realtime.Client.html": {
    "href": "api/Supabase.Realtime.Client.html",
    "title": "Class Client | realtime-csharp",
    "summary": "Class Client Namespace Supabase.Realtime Assembly Supabase.Realtime.dll Singleton that represents a Client connection to a Realtime Server. It maintains a singular Websocket with asynchronous listeners (RealtimeChannels). public class Client : IRealtimeClient<RealtimeSocket, RealtimeChannel>, IGettableHeaders Inheritance object Client Implements IRealtimeClient<RealtimeSocket, RealtimeChannel> IGettableHeaders Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Examples client = Client.Instance Constructors Client(string, ClientOptions?) Initializes a Client instance, this method should be called prior to any other method. public Client(string realtimeUrl, ClientOptions? options = null) Parameters realtimeUrl string The connection url (ex: \"ws://localhost:4000/socket\" - no trailing slash required) options ClientOptions Properties GetHeaders An executable Func that returns a dictionary of headers to be appended onto a request. public Func<Dictionary<string, string>>? GetHeaders { get; set; } Property Value Func<Dictionary<string, string>> Options Client Options - most of which are regarding Socket connection Options public ClientOptions Options { get; } Property Value ClientOptions SerializerSettings Custom Serializer resolvers and converters that will be used for encoding and decoding Postgrest JSON responses. By default, Postgrest seems to use a date format that C# and Newtonsoft do not like, so this initial configuration handles that. public JsonSerializerSettings SerializerSettings { get; } Property Value JsonSerializerSettings Socket The backing Socket class. Most methods of the Client act as proxies to the Socket class. public IRealtimeSocket? Socket { get; } Property Value IRealtimeSocket Subscriptions Exposes all Realtime RealtimeChannel Subscriptions for R/O public consumption public ReadOnlyDictionary<string, RealtimeChannel> Subscriptions { get; } Property Value ReadOnlyDictionary<string, RealtimeChannel> Methods AddDebugHandler(DebugEventHandler) Adds a debug handler, likely used within a logging solution of some kind. public void AddDebugHandler(IRealtimeDebugger.DebugEventHandler handler) Parameters handler IRealtimeDebugger.DebugEventHandler AddStateChangedHandler(SocketStateEventHandler) Adds a listener to be notified when the socket state changes. public void AddStateChangedHandler(IRealtimeClient<RealtimeSocket, RealtimeChannel>.SocketStateEventHandler handler) Parameters handler IRealtimeClient<RealtimeSocket, RealtimeChannel>.SocketStateEventHandler Channel(string) Adds a RealtimeChannel subscription - if a subscription exists with the same signature, the existing subscription will be returned. public RealtimeChannel Channel(string channelName) Parameters channelName string The name of the Channel to join (totally arbitrary) Returns RealtimeChannel Exceptions Exception Channel(string, string, string, string?, string?, Dictionary<string, string>?) Adds a RealtimeChannel subscription - if a subscription exists with the same signature, the existing subscription will be returned. public RealtimeChannel Channel(string database = \"realtime\", string schema = \"public\", string table = \"*\", string? column = null, string? value = null, Dictionary<string, string>? parameters = null) Parameters database string Database to connect to, with Supabase this will likely be realtime. schema string Postgres schema, usually public table string Postgres table name column string Postgres column name value string Value the specified column should have parameters Dictionary<string, string> Returns RealtimeChannel ClearDebugHandlers() Clears debug handlers; public void ClearDebugHandlers() ClearStateChangedHandlers() Clears all of the listeners from receiving socket state changes. public void ClearStateChangedHandlers() Connect(Action<IRealtimeClient<RealtimeSocket, RealtimeChannel>, RealtimeException?>?) Attempts to connect to the socket. Provides a callback for Task driven returns. [Obsolete(\"Please use ConnectAsync() instead.\")] public IRealtimeClient<RealtimeSocket, RealtimeChannel> Connect(Action<IRealtimeClient<RealtimeSocket, RealtimeChannel>, RealtimeException?>? callback = null) Parameters callback Action<IRealtimeClient<RealtimeSocket, RealtimeChannel>, RealtimeException> Returns IRealtimeClient<RealtimeSocket, RealtimeChannel> ConnectAsync() Attempts to connect to the Socket. Returns when socket has successfully connected. public Task<IRealtimeClient<RealtimeSocket, RealtimeChannel>> ConnectAsync() Returns Task<IRealtimeClient<RealtimeSocket, RealtimeChannel>> Disconnect(WebSocketCloseStatus, string) Disconnects from the socket server (if connected). public IRealtimeClient<RealtimeSocket, RealtimeChannel> Disconnect(WebSocketCloseStatus code = WebSocketCloseStatus.NormalClosure, string reason = \"Programmatic Disconnect\") Parameters code WebSocketCloseStatus Status Code reason string Reason for disconnect Returns IRealtimeClient<RealtimeSocket, RealtimeChannel> Remove(RealtimeChannel) Removes a channel subscription. public void Remove(RealtimeChannel channel) Parameters channel RealtimeChannel RemoveDebugHandler(DebugEventHandler) Removes a debug handler public void RemoveDebugHandler(IRealtimeDebugger.DebugEventHandler handler) Parameters handler IRealtimeDebugger.DebugEventHandler RemoveStateChangedHandler(SocketStateEventHandler) Removes a specified listener from socket state changes. public void RemoveStateChangedHandler(IRealtimeClient<RealtimeSocket, RealtimeChannel>.SocketStateEventHandler handler) Parameters handler IRealtimeClient<RealtimeSocket, RealtimeChannel>.SocketStateEventHandler SetAuth(string) Sets the JWT access token used for channel subscription authorization and Realtime RLS. Ref: https://github.com/supabase/realtime-js/pull/117 | https://github.com/supabase/realtime-js/pull/117 public void SetAuth(string jwt) Parameters jwt string"
  },
  "api/Supabase.Realtime.ClientOptions.html": {
    "href": "api/Supabase.Realtime.ClientOptions.html",
    "title": "Class ClientOptions | realtime-csharp",
    "summary": "Class ClientOptions Namespace Supabase.Realtime Assembly Supabase.Realtime.dll Options used when initializing a Client public class ClientOptions Inheritance object ClientOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields DateTimeStyles Datetime Style for JSON Deserialization of Models public readonly DateTimeStyles DateTimeStyles Field Value DateTimeStyles Headers Request headers to be appended to the connection string. public readonly Dictionary<string, string> Headers Field Value Dictionary<string, string> Parameters The optional params to pass when connecting public SocketOptionsParameters Parameters Field Value SocketOptionsParameters Properties DateTimeFormat Datetime format for JSON Deserialization of Models (Postgrest style) public string DateTimeFormat { get; set; } Property Value string Decode The function to decode incoming messages. public Action<string, Action<SocketResponse?>>? Decode { get; set; } Property Value Action<string, Action<SocketResponse>> Encode The function to encode outgoing messages. Defaults to JSON public Action<object, Action<string>>? Encode { get; set; } Property Value Action<object, Action<string>> EventsPerSecond @todo Presently unused: Limit the number of events that can be sent per second. public int EventsPerSecond { get; set; } Property Value int HeartbeatInterval The interval to send a heartbeat message public TimeSpan HeartbeatInterval { get; set; } Property Value TimeSpan ReconnectAfterInterval The interval to reconnect public Func<int, TimeSpan> ReconnectAfterInterval { get; set; } Property Value Func<int, TimeSpan> Timeout The default timeout in milliseconds to trigger push timeouts. public TimeSpan Timeout { get; set; } Property Value TimeSpan Transport The Websocket Transport, for example WebSocket. public string Transport { get; set; } Property Value string"
  },
  "api/Supabase.Realtime.Constants.ChannelEventName.html": {
    "href": "api/Supabase.Realtime.Constants.ChannelEventName.html",
    "title": "Enum Constants.ChannelEventName | realtime-csharp",
    "summary": "Enum Constants.ChannelEventName Namespace Supabase.Realtime Assembly Supabase.Realtime.dll Mapping for event names that can be used with Push(string, string?, object?, int) to send arbitrary data. This is unlikely to be used by the developer. public enum Constants.ChannelEventName Fields [MapTo(\"broadcast\", null)] Broadcast = 0 The broadcast event [MapTo(\"postgres_changes\", null)] PostgresChanges = 2 A postgres_changes event [MapTo(\"presence\", null)] Presence = 1 The Presence event"
  },
  "api/Supabase.Realtime.Constants.ChannelState.html": {
    "href": "api/Supabase.Realtime.Constants.ChannelState.html",
    "title": "Enum Constants.ChannelState | realtime-csharp",
    "summary": "Enum Constants.ChannelState Namespace Supabase.Realtime Assembly Supabase.Realtime.dll Mapping of channel states, used with RealtimeChannel public enum Constants.ChannelState Fields [MapTo(\"closed\", null)] Closed = 0 Channel is closed [MapTo(\"errored\", null)] Errored = 1 Channel has errored [MapTo(\"joined\", null)] Joined = 2 Channel is joined [MapTo(\"joining\", null)] Joining = 3 Channel is joining [MapTo(\"leaving\", null)] Leaving = 4 Channel is leaving"
  },
  "api/Supabase.Realtime.Constants.EventType.html": {
    "href": "api/Supabase.Realtime.Constants.EventType.html",
    "title": "Enum Constants.EventType | realtime-csharp",
    "summary": "Enum Constants.EventType Namespace Supabase.Realtime Assembly Supabase.Realtime.dll A channel event type used and parsed in a SocketResponse public enum Constants.EventType Fields Broadcast = 3 A broadcast event Delete = 2 postgres_changes Delete event Insert = 0 postgres_changes Insert event Internal = 8 An internal event (likely unused by the developer) PostgresChanges = 6 The catchall event for postgres_changes, parsed into a more specific Insert, Update or Delete PresenceDiff = 5 A presence leave or join event PresenceState = 4 A presence state or sync event System = 7 A system event (likely unused by the developer) Unknown = 9 A presently unknown event, if this is seen, please open an issue at https://github.com/supabase-community/realtime-csharp Update = 1 postgres_changes Update event"
  },
  "api/Supabase.Realtime.Constants.PresenceListenEventTypes.html": {
    "href": "api/Supabase.Realtime.Constants.PresenceListenEventTypes.html",
    "title": "Enum Constants.PresenceListenEventTypes | realtime-csharp",
    "summary": "Enum Constants.PresenceListenEventTypes Namespace Supabase.Realtime Assembly Supabase.Realtime.dll Map of Presence listener types, used with: RealtimePresence<TPresenceModel> public enum Constants.PresenceListenEventTypes Fields [MapTo(\"join\", null)] Join = 1 A join event [MapTo(\"leave\", null)] Leave = 2 A leave event [MapTo(\"sync\", null)] Sync = 0 A sync event (either join or leave)"
  },
  "api/Supabase.Realtime.Constants.SocketState.html": {
    "href": "api/Supabase.Realtime.Constants.SocketState.html",
    "title": "Enum Constants.SocketState | realtime-csharp",
    "summary": "Enum Constants.SocketState Namespace Supabase.Realtime Assembly Supabase.Realtime.dll The Current Socket state, used in RealtimeSocket public enum Constants.SocketState Fields Close = 1 Socket Closed Error = 3 Socket has errored Open = 0 Socket Open Reconnect = 2 Socket is Reconnecting"
  },
  "api/Supabase.Realtime.Constants.html": {
    "href": "api/Supabase.Realtime.Constants.html",
    "title": "Class Constants | realtime-csharp",
    "summary": "Class Constants Namespace Supabase.Realtime Assembly Supabase.Realtime.dll Shared constants for Realtime public static class Constants Inheritance object Constants Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields ChannelAccessToken The event name used to send an access_token to the Phoenix server public const string ChannelAccessToken = \"access_token\" Field Value string ChannelEventBroadcast Phoenix Server Event: BROADCAST public const string ChannelEventBroadcast = \"broadcast\" Field Value string ChannelEventClose Phoenix Socket Server Event: CLOSE public static string ChannelEventClose Field Value string ChannelEventError Phoenix Socket Server Event: ERROR public static string ChannelEventError Field Value string ChannelEventJoin Phoenix Socket Server Event: JOIN public const string ChannelEventJoin = \"phx_join\" Field Value string ChannelEventLeave Phoenix Socket Server Event: LEAVE public const string ChannelEventLeave = \"phx_leave\" Field Value string ChannelEventPostgresChanges Phoenix Server Event: POSTGRES_CHANGES public const string ChannelEventPostgresChanges = \"postgres_changes\" Field Value string ChannelEventPresenceDiff Phoenix Server Event: PRESENCE_DIFF public const string ChannelEventPresenceDiff = \"presence_diff\" Field Value string ChannelEventPresenceState Phoenix Server Event: PRESENCE_STATE public const string ChannelEventPresenceState = \"presence_state\" Field Value string ChannelEventReply Phoenix Socket Server Event: REPLY public const string ChannelEventReply = \"phx_reply\" Field Value string ChannelEventSystem Phoenix Socket Server Event: SYSTEM public const string ChannelEventSystem = \"system\" Field Value string DefaultTimeout Timeout interval for requests (used in Socket and Push) public const int DefaultTimeout = 10000 Field Value int PhoenixStatusError Phoenix Server Event: ERROR public const string PhoenixStatusError = \"error\" Field Value string PhoenixStatusOk Phoenix Server Event: OK public const string PhoenixStatusOk = \"ok\" Field Value string TransportWebsocket The transport type, used with Phoenix server implementations and appended on the Supabase.Realtime.RealtimeSocket.EndpointUrl public const string TransportWebsocket = \"websocket\" Field Value string"
  },
  "api/Supabase.Realtime.Converters.IntArrayConverter.html": {
    "href": "api/Supabase.Realtime.Converters.IntArrayConverter.html",
    "title": "Class IntArrayConverter | realtime-csharp",
    "summary": "Class IntArrayConverter Namespace Supabase.Realtime.Converters Assembly Supabase.Realtime.dll An int array converter that specifically parses Postgrest styled arrays {1,2,3} and [1,2,3] from strings into a List<T>. public class IntArrayConverter : JsonConverter Inheritance object JsonConverter IntArrayConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CanRead Gets a value indicating whether this Newtonsoft.Json.JsonConverter can read JSON. public override bool CanRead { get; } Property Value bool true if this Newtonsoft.Json.JsonConverter can read JSON; otherwise, false. CanWrite Gets a value indicating whether this Newtonsoft.Json.JsonConverter can write JSON. public override bool CanWrite { get; } Property Value bool true if this Newtonsoft.Json.JsonConverter can write JSON; otherwise, false. Methods CanConvert(Type) Determines whether this instance can convert the specified object type. public override bool CanConvert(Type objectType) Parameters objectType Type Type of the object. Returns bool true if this instance can convert the specified object type; otherwise, false. ReadJson(JsonReader, Type, object?, JsonSerializer) Reads the JSON representation of the object. public override object? ReadJson(JsonReader reader, Type objectType, object? existingValue, JsonSerializer serializer) Parameters reader JsonReader The Newtonsoft.Json.JsonReader to read from. objectType Type Type of the object. existingValue object The existing value of object being read. serializer JsonSerializer The calling serializer. Returns object The object value. WriteJson(JsonWriter, object?, JsonSerializer) Writes the JSON representation of the object. public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer) Parameters writer JsonWriter The Newtonsoft.Json.JsonWriter to write to. value object The value. serializer JsonSerializer The calling serializer."
  },
  "api/Supabase.Realtime.Converters.StringArrayConverter.html": {
    "href": "api/Supabase.Realtime.Converters.StringArrayConverter.html",
    "title": "Class StringArrayConverter | realtime-csharp",
    "summary": "Class StringArrayConverter Namespace Supabase.Realtime.Converters Assembly Supabase.Realtime.dll An string array converter that specifically parses Postgrest styled arrays {big,string,array} and [1,2,3] from strings into a List<T>. public class StringArrayConverter : JsonConverter Inheritance object JsonConverter StringArrayConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CanRead Gets a value indicating whether this Newtonsoft.Json.JsonConverter can read JSON. public override bool CanRead { get; } Property Value bool true if this Newtonsoft.Json.JsonConverter can read JSON; otherwise, false. CanWrite Gets a value indicating whether this Newtonsoft.Json.JsonConverter can write JSON. public override bool CanWrite { get; } Property Value bool true if this Newtonsoft.Json.JsonConverter can write JSON; otherwise, false. Methods CanConvert(Type) Determines whether this instance can convert the specified object type. public override bool CanConvert(Type objectType) Parameters objectType Type Type of the object. Returns bool true if this instance can convert the specified object type; otherwise, false. ReadJson(JsonReader, Type, object?, JsonSerializer) Reads the JSON representation of the object. public override object? ReadJson(JsonReader reader, Type objectType, object? existingValue, JsonSerializer serializer) Parameters reader JsonReader The Newtonsoft.Json.JsonReader to read from. objectType Type Type of the object. existingValue object The existing value of object being read. serializer JsonSerializer The calling serializer. Returns object The object value. WriteJson(JsonWriter, object?, JsonSerializer) Writes the JSON representation of the object. public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer) Parameters writer JsonWriter The Newtonsoft.Json.JsonWriter to write to. value object The value. serializer JsonSerializer The calling serializer."
  },
  "api/Supabase.Realtime.Converters.html": {
    "href": "api/Supabase.Realtime.Converters.html",
    "title": "Namespace Supabase.Realtime.Converters | realtime-csharp",
    "summary": "Namespace Supabase.Realtime.Converters Classes IntArrayConverter An int array converter that specifically parses Postgrest styled arrays {1,2,3} and [1,2,3] from strings into a List<T>. StringArrayConverter An string array converter that specifically parses Postgrest styled arrays {big,string,array} and [1,2,3] from strings into a List<T>."
  },
  "api/Supabase.Realtime.Exceptions.FailureHint.Reason.html": {
    "href": "api/Supabase.Realtime.Exceptions.FailureHint.Reason.html",
    "title": "Enum FailureHint.Reason | realtime-csharp",
    "summary": "Enum FailureHint.Reason Namespace Supabase.Realtime.Exceptions Assembly Supabase.Realtime.dll Reasons for a failure public enum FailureHint.Reason Fields ChannelJoinFailure = 3 Channel cannot be joined ChannelNotOpen = 2 Channel is not open ConnectionLost = 5 Connection has been lost ConnectionStale = 6 No message has been received, usually given by server. If seen, please open an issue. PushTimeout = 1 A push timeout SocketError = 4 Socket has errored, either in connection or reconnection. Unknown = 0 Catchall for any kind of failure that is presently untyped."
  },
  "api/Supabase.Realtime.Exceptions.FailureHint.html": {
    "href": "api/Supabase.Realtime.Exceptions.FailureHint.html",
    "title": "Class FailureHint | realtime-csharp",
    "summary": "Class FailureHint Namespace Supabase.Realtime.Exceptions Assembly Supabase.Realtime.dll A failure hint public static class FailureHint Inheritance object FailureHint Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Parse(DisconnectionInfo) Parses a Failure reason from a Websocket.Client.DisconnectionInfo public static FailureHint.Reason Parse(DisconnectionInfo info) Parameters info DisconnectionInfo Returns FailureHint.Reason"
  },
  "api/Supabase.Realtime.Exceptions.RealtimeException.html": {
    "href": "api/Supabase.Realtime.Exceptions.RealtimeException.html",
    "title": "Class RealtimeException | realtime-csharp",
    "summary": "Class RealtimeException Namespace Supabase.Realtime.Exceptions Assembly Supabase.Realtime.dll An Exception thrown within Supabase.Realtime public class RealtimeException : Exception, ISerializable Inheritance object Exception RealtimeException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors RealtimeException(string?) public RealtimeException(string? message) Parameters message string RealtimeException(string?, Exception?) public RealtimeException(string? message, Exception? innerException) Parameters message string innerException Exception Properties Reason A specific reason for this exception, as provided by this library. public FailureHint.Reason Reason { get; } Property Value FailureHint.Reason Methods FromDisconnectionInfo(DisconnectionInfo) Creates exception from a Websocket.Client.DisconnectionInfo instance. public static RealtimeException FromDisconnectionInfo(DisconnectionInfo info) Parameters info DisconnectionInfo Returns RealtimeException"
  },
  "api/Supabase.Realtime.Exceptions.html": {
    "href": "api/Supabase.Realtime.Exceptions.html",
    "title": "Namespace Supabase.Realtime.Exceptions | realtime-csharp",
    "summary": "Namespace Supabase.Realtime.Exceptions Classes FailureHint A failure hint RealtimeException An Exception thrown within Supabase.Realtime Enums FailureHint.Reason Reasons for a failure"
  },
  "api/Supabase.Realtime.Interfaces.IRealtimeBroadcast.BroadcastEventHandler.html": {
    "href": "api/Supabase.Realtime.Interfaces.IRealtimeBroadcast.BroadcastEventHandler.html",
    "title": "Delegate IRealtimeBroadcast.BroadcastEventHandler | realtime-csharp",
    "summary": "Delegate IRealtimeBroadcast.BroadcastEventHandler Namespace Supabase.Realtime.Interfaces Assembly Supabase.Realtime.dll A delegate for broadcast events public delegate void IRealtimeBroadcast.BroadcastEventHandler(IRealtimeBroadcast sender, BaseBroadcast? broadcast) Parameters sender IRealtimeBroadcast A delegate for broadcast events broadcast BaseBroadcast A delegate for broadcast events"
  },
  "api/Supabase.Realtime.Interfaces.IRealtimeBroadcast.html": {
    "href": "api/Supabase.Realtime.Interfaces.IRealtimeBroadcast.html",
    "title": "Interface IRealtimeBroadcast | realtime-csharp",
    "summary": "Interface IRealtimeBroadcast Namespace Supabase.Realtime.Interfaces Assembly Supabase.Realtime.dll A contract representing a realtime broadcast public interface IRealtimeBroadcast Methods AddBroadcastEventHandler(BroadcastEventHandler) Adds a broadcast event handler void AddBroadcastEventHandler(IRealtimeBroadcast.BroadcastEventHandler broadcastEventHandler) Parameters broadcastEventHandler IRealtimeBroadcast.BroadcastEventHandler ClearBroadcastEventHandlers() Clears all broadcast event handlers void ClearBroadcastEventHandlers() RemoveBroadcastEventHandler(BroadcastEventHandler) Removes a broadcast event handler void RemoveBroadcastEventHandler(IRealtimeBroadcast.BroadcastEventHandler broadcastEventHandler) Parameters broadcastEventHandler IRealtimeBroadcast.BroadcastEventHandler Send(string?, object, int) Sends a broadcast to a given event name with an arbitrary, serializable payload. Task<bool> Send(string? broadcastEventName, object payload, int timeoutMs = 10000) Parameters broadcastEventName string payload object timeoutMs int Returns Task<bool>"
  },
  "api/Supabase.Realtime.Interfaces.IRealtimeChannel.ErrorEventHandler.html": {
    "href": "api/Supabase.Realtime.Interfaces.IRealtimeChannel.ErrorEventHandler.html",
    "title": "Delegate IRealtimeChannel.ErrorEventHandler | realtime-csharp",
    "summary": "Delegate IRealtimeChannel.ErrorEventHandler Namespace Supabase.Realtime.Interfaces Assembly Supabase.Realtime.dll Delegate for errors on this channel public delegate void IRealtimeChannel.ErrorEventHandler(IRealtimeChannel sender, RealtimeException exception) Parameters sender IRealtimeChannel Delegate for errors on this channel exception RealtimeException Delegate for errors on this channel"
  },
  "api/Supabase.Realtime.Interfaces.IRealtimeChannel.MessageReceivedHandler.html": {
    "href": "api/Supabase.Realtime.Interfaces.IRealtimeChannel.MessageReceivedHandler.html",
    "title": "Delegate IRealtimeChannel.MessageReceivedHandler | realtime-csharp",
    "summary": "Delegate IRealtimeChannel.MessageReceivedHandler Namespace Supabase.Realtime.Interfaces Assembly Supabase.Realtime.dll Delegate for messages received on this channel public delegate void IRealtimeChannel.MessageReceivedHandler(IRealtimeChannel sender, SocketResponse message) Parameters sender IRealtimeChannel Delegate for messages received on this channel message SocketResponse Delegate for messages received on this channel"
  },
  "api/Supabase.Realtime.Interfaces.IRealtimeChannel.PostgresChangesHandler.html": {
    "href": "api/Supabase.Realtime.Interfaces.IRealtimeChannel.PostgresChangesHandler.html",
    "title": "Delegate IRealtimeChannel.PostgresChangesHandler | realtime-csharp",
    "summary": "Delegate IRealtimeChannel.PostgresChangesHandler Namespace Supabase.Realtime.Interfaces Assembly Supabase.Realtime.dll Delegate for postgres changes public delegate void IRealtimeChannel.PostgresChangesHandler(IRealtimeChannel sender, PostgresChangesResponse change) Parameters sender IRealtimeChannel Delegate for postgres changes change PostgresChangesResponse Delegate for postgres changes"
  },
  "api/Supabase.Realtime.Interfaces.IRealtimeChannel.StateChangedHandler.html": {
    "href": "api/Supabase.Realtime.Interfaces.IRealtimeChannel.StateChangedHandler.html",
    "title": "Delegate IRealtimeChannel.StateChangedHandler | realtime-csharp",
    "summary": "Delegate IRealtimeChannel.StateChangedHandler Namespace Supabase.Realtime.Interfaces Assembly Supabase.Realtime.dll Delegate for channel state changes public delegate void IRealtimeChannel.StateChangedHandler(IRealtimeChannel sender, Constants.ChannelState state) Parameters sender IRealtimeChannel Delegate for channel state changes state Constants.ChannelState Delegate for channel state changes"
  },
  "api/Supabase.Realtime.Interfaces.IRealtimeChannel.html": {
    "href": "api/Supabase.Realtime.Interfaces.IRealtimeChannel.html",
    "title": "Interface IRealtimeChannel | realtime-csharp",
    "summary": "Interface IRealtimeChannel Namespace Supabase.Realtime.Interfaces Assembly Supabase.Realtime.dll A contract representing a realtime channel public interface IRealtimeChannel Properties BroadcastOptions The Channel's broadcast options (used prior to Subscribe(int)) BroadcastOptions? BroadcastOptions { get; } Property Value BroadcastOptions HasJoinedOnce If this channel has been successfully joined (and thus, should be rejoined on a failure) bool HasJoinedOnce { get; } Property Value bool IsClosed Is channel closed? bool IsClosed { get; } Property Value bool IsErrored Is channel erroring? bool IsErrored { get; } Property Value bool IsJoined Is channel joined? bool IsJoined { get; } Property Value bool IsJoining Is channel being joined? bool IsJoining { get; } Property Value bool IsLeaving Is channel leaving? bool IsLeaving { get; } Property Value bool Options The Channel's initialization options ChannelOptions Options { get; } Property Value ChannelOptions PostgresChangesOptions The Channel's postgres_changes options (used prior to Subscribe(int)) List<PostgresChangesOptions> PostgresChangesOptions { get; } Property Value List<PostgresChangesOptions> PresenceOptions The Channel's presence options (used prior to Subscribe(int)) PresenceOptions? PresenceOptions { get; } Property Value PresenceOptions State The Channel's current state Constants.ChannelState State { get; } Property Value Constants.ChannelState Topic A string representing this channel's topic, used for identifying/repeat access to this channel. string Topic { get; } Property Value string Methods AddErrorHandler(ErrorEventHandler) Add an error handler void AddErrorHandler(IRealtimeChannel.ErrorEventHandler handler) Parameters handler IRealtimeChannel.ErrorEventHandler AddMessageReceivedHandler(MessageReceivedHandler) Add a message received handler void AddMessageReceivedHandler(IRealtimeChannel.MessageReceivedHandler messageReceivedHandler) Parameters messageReceivedHandler IRealtimeChannel.MessageReceivedHandler AddPostgresChangeHandler(ListenType, PostgresChangesHandler) Add a postgres_changes handler void AddPostgresChangeHandler(PostgresChangesOptions.ListenType listenType, IRealtimeChannel.PostgresChangesHandler postgresChangeHandler) Parameters listenType PostgresChangesOptions.ListenType postgresChangeHandler IRealtimeChannel.PostgresChangesHandler AddStateChangedHandler(StateChangedHandler) Add a state changed listener void AddStateChangedHandler(IRealtimeChannel.StateChangedHandler stateChangedHandler) Parameters stateChangedHandler IRealtimeChannel.StateChangedHandler Broadcast() Get the IRealtimeBroadcast helper IRealtimeBroadcast? Broadcast() Returns IRealtimeBroadcast ClearErrorHandlers() Clear error handlers. void ClearErrorHandlers() ClearMessageReceivedHandlers() Clear message received handlers. void ClearMessageReceivedHandlers() ClearPostgresChangeHandlers() Clear postgres_changes handlers void ClearPostgresChangeHandlers() ClearStateChangedHandlers() Clear state changed handlers void ClearStateChangedHandlers() Presence() Get the IRealtimePresence helper. IRealtimePresence? Presence() Returns IRealtimePresence Push(string, string?, object?, int) Push an arbitrary event to a subscribed channel. Push Push(string eventName, string? type = null, object? payload = null, int timeoutMs = 10000) Parameters eventName string type string payload object timeoutMs int Returns Push Register(PostgresChangesOptions) Register postgres_changes options, must be called to use IRealtimeChannel.PostgresChangesHandler, and prior to Subscribe(int) IRealtimeChannel Register(PostgresChangesOptions postgresChangesOptions) Parameters postgresChangesOptions PostgresChangesOptions Returns IRealtimeChannel Register<TBroadcastResponse>(bool, bool) Register broadcast options, must be called to use IRealtimeBroadcast, and prior to Subscribe(int) RealtimeBroadcast<TBroadcastResponse> Register<TBroadcastResponse>(bool broadcastSelf = false, bool broadcastAck = false) where TBroadcastResponse : BaseBroadcast Parameters broadcastSelf bool broadcastAck bool Returns RealtimeBroadcast<TBroadcastResponse> Type Parameters TBroadcastResponse Register<TPresenceResponse>(string) Register presence options, must be called to use IRealtimePresence, and prior to Subscribe(int) RealtimePresence<TPresenceResponse> Register<TPresenceResponse>(string presenceKey) where TPresenceResponse : BasePresence Parameters presenceKey string Returns RealtimePresence<TPresenceResponse> Type Parameters TPresenceResponse Rejoin(int) Rejoin a channel. void Rejoin(int timeoutMs = 10000) Parameters timeoutMs int RemoveErrorHandler(ErrorEventHandler) Remove an error handler void RemoveErrorHandler(IRealtimeChannel.ErrorEventHandler handler) Parameters handler IRealtimeChannel.ErrorEventHandler RemoveMessageReceivedHandler(MessageReceivedHandler) Remove a message received handler. void RemoveMessageReceivedHandler(IRealtimeChannel.MessageReceivedHandler messageReceivedHandler) Parameters messageReceivedHandler IRealtimeChannel.MessageReceivedHandler RemovePostgresChangeHandler(ListenType, PostgresChangesHandler) Remove a postgres_changes handler void RemovePostgresChangeHandler(PostgresChangesOptions.ListenType listenType, IRealtimeChannel.PostgresChangesHandler postgresChangeHandler) Parameters listenType PostgresChangesOptions.ListenType postgresChangeHandler IRealtimeChannel.PostgresChangesHandler RemoveStateChangedHandler(StateChangedHandler) Remove a state changed handler void RemoveStateChangedHandler(IRealtimeChannel.StateChangedHandler stateChangedHandler) Parameters stateChangedHandler IRealtimeChannel.StateChangedHandler Send(ChannelEventName, string?, object, int) Send an arbitrary event with an awaitable task. Task<bool> Send(Constants.ChannelEventName eventType, string? type, object payload, int timeoutMs = 10000) Parameters eventType Constants.ChannelEventName type string payload object timeoutMs int Returns Task<bool> Subscribe(int) Subscribes to a channel. Task<IRealtimeChannel> Subscribe(int timeoutMs = 10000) Parameters timeoutMs int Returns Task<IRealtimeChannel> Unsubscribe() Unsubscribes from a channel. IRealtimeChannel Unsubscribe() Returns IRealtimeChannel"
  },
  "api/Supabase.Realtime.Interfaces.IRealtimeClient-2.SocketStateEventHandler.html": {
    "href": "api/Supabase.Realtime.Interfaces.IRealtimeClient-2.SocketStateEventHandler.html",
    "title": "Delegate IRealtimeClient<TSocket, TChannel>.SocketStateEventHandler | realtime-csharp",
    "summary": "Delegate IRealtimeClient<TSocket, TChannel>.SocketStateEventHandler Namespace Supabase.Realtime.Interfaces Assembly Supabase.Realtime.dll Delegate for handling a socket state event, this can be seen as synonymous with the Client's state. public delegate void IRealtimeClient<TSocket, TChannel>.SocketStateEventHandler(IRealtimeClient<TSocket, TChannel> sender, Constants.SocketState state) Parameters sender IRealtimeClient<TSocket, TChannel> Delegate for handling a socket state event, this can be seen as synonymous with the Client's state. state Constants.SocketState Delegate for handling a socket state event, this can be seen as synonymous with the Client's state."
  },
  "api/Supabase.Realtime.Interfaces.IRealtimeClient-2.html": {
    "href": "api/Supabase.Realtime.Interfaces.IRealtimeClient-2.html",
    "title": "Interface IRealtimeClient<TSocket, TChannel> | realtime-csharp",
    "summary": "Interface IRealtimeClient<TSocket, TChannel> Namespace Supabase.Realtime.Interfaces Assembly Supabase.Realtime.dll Contract representing a Realtime Client public interface IRealtimeClient<TSocket, TChannel> : IGettableHeaders where TSocket : IRealtimeSocket where TChannel : IRealtimeChannel Type Parameters TSocket TChannel Inherited Members IGettableHeaders.GetHeaders Properties Options The options initializing this client. ClientOptions Options { get; } Property Value ClientOptions SerializerSettings Json serializer settings JsonSerializerSettings SerializerSettings { get; } Property Value JsonSerializerSettings Socket The connected realtime socket IRealtimeSocket? Socket { get; } Property Value IRealtimeSocket Subscriptions A collection of channels ordered by topic name ReadOnlyDictionary<string, TChannel> Subscriptions { get; } Property Value ReadOnlyDictionary<string, TChannel> Methods AddDebugHandler(DebugEventHandler) Adds a debug handler, likely used within a logging solution of some kind. void AddDebugHandler(IRealtimeDebugger.DebugEventHandler handler) Parameters handler IRealtimeDebugger.DebugEventHandler AddStateChangedHandler(SocketStateEventHandler) Add a Socket State listener void AddStateChangedHandler(IRealtimeClient<TSocket, TChannel>.SocketStateEventHandler handler) Parameters handler IRealtimeClient<TSocket, TChannel>.SocketStateEventHandler Channel(string) Initialize a new channel with an arbitrary channel name. TChannel Channel(string channelName) Parameters channelName string Returns TChannel Channel(string, string, string, string?, string?, Dictionary<string, string>?) Shorthand initialization of a channel with postgres_changes options already set. TChannel Channel(string database = \"realtime\", string schema = \"public\", string table = \"*\", string? column = null, string? value = null, Dictionary<string, string>? parameters = null) Parameters database string schema string table string column string value string parameters Dictionary<string, string> Returns TChannel ClearDebugHandlers() Clears debug handlers; void ClearDebugHandlers() ClearStateChangedHandlers() Clear socket state listeners void ClearStateChangedHandlers() Connect(Action<IRealtimeClient<TSocket, TChannel>, RealtimeException?>?) Connect to the Socket IRealtimeClient<TSocket, TChannel> Connect(Action<IRealtimeClient<TSocket, TChannel>, RealtimeException?>? callback = null) Parameters callback Action<IRealtimeClient<TSocket, TChannel>, RealtimeException> Returns IRealtimeClient<TSocket, TChannel> ConnectAsync() Connect to the Socket Task<IRealtimeClient<TSocket, TChannel>> ConnectAsync() Returns Task<IRealtimeClient<TSocket, TChannel>> Disconnect(WebSocketCloseStatus, string) Disconnect from the Socket IRealtimeClient<TSocket, TChannel> Disconnect(WebSocketCloseStatus code = WebSocketCloseStatus.NormalClosure, string reason = \"Programmatic Disconnect\") Parameters code WebSocketCloseStatus reason string Returns IRealtimeClient<TSocket, TChannel> Remove(TChannel) Remove an initialized IRealtimeChannel void Remove(TChannel channel) Parameters channel TChannel RemoveDebugHandler(DebugEventHandler) Removes a debug handler void RemoveDebugHandler(IRealtimeDebugger.DebugEventHandler handler) Parameters handler IRealtimeDebugger.DebugEventHandler RemoveStateChangedHandler(SocketStateEventHandler) Remove a Socket State listener void RemoveStateChangedHandler(IRealtimeClient<TSocket, TChannel>.SocketStateEventHandler handler) Parameters handler IRealtimeClient<TSocket, TChannel>.SocketStateEventHandler SetAuth(string) Sets the authentication JWT to be passed into all realtime channels. Used for WALRUS permissions. void SetAuth(string jwt) Parameters jwt string"
  },
  "api/Supabase.Realtime.Interfaces.IRealtimeDebugger.DebugEventHandler.html": {
    "href": "api/Supabase.Realtime.Interfaces.IRealtimeDebugger.DebugEventHandler.html",
    "title": "Delegate IRealtimeDebugger.DebugEventHandler | realtime-csharp",
    "summary": "Delegate IRealtimeDebugger.DebugEventHandler Namespace Supabase.Realtime.Interfaces Assembly Supabase.Realtime.dll A debug event handler public delegate void IRealtimeDebugger.DebugEventHandler(object sender, string message, Exception? exception) Parameters sender object A debug event handler message string A debug event handler exception Exception A debug event handler"
  },
  "api/Supabase.Realtime.Interfaces.IRealtimeDebugger.html": {
    "href": "api/Supabase.Realtime.Interfaces.IRealtimeDebugger.html",
    "title": "Interface IRealtimeDebugger | realtime-csharp",
    "summary": "Interface IRealtimeDebugger Namespace Supabase.Realtime.Interfaces Assembly Supabase.Realtime.dll Contract representing an internal debugger. public interface IRealtimeDebugger Methods AddDebugHandler(DebugEventHandler) Adds a debug listener void AddDebugHandler(IRealtimeDebugger.DebugEventHandler handler) Parameters handler IRealtimeDebugger.DebugEventHandler ClearDebugHandlers() Clears debug handlers. void ClearDebugHandlers() Log(object, string, Exception?) Notifies debug listeners void Log(object sender, string message, Exception? exception = null) Parameters sender object message string exception Exception RemoveDebugHandler(DebugEventHandler) Removes a debug handler. void RemoveDebugHandler(IRealtimeDebugger.DebugEventHandler handler) Parameters handler IRealtimeDebugger.DebugEventHandler"
  },
  "api/Supabase.Realtime.Interfaces.IRealtimePresence.EventType.html": {
    "href": "api/Supabase.Realtime.Interfaces.IRealtimePresence.EventType.html",
    "title": "Enum IRealtimePresence.EventType | realtime-csharp",
    "summary": "Enum IRealtimePresence.EventType Namespace Supabase.Realtime.Interfaces Assembly Supabase.Realtime.dll Mapping of presence event types public enum IRealtimePresence.EventType Fields Join = 1 Join event Leave = 2 Leave event Sync = 0 Sync event (both join and leave)"
  },
  "api/Supabase.Realtime.Interfaces.IRealtimePresence.PresenceEventHandler.html": {
    "href": "api/Supabase.Realtime.Interfaces.IRealtimePresence.PresenceEventHandler.html",
    "title": "Delegate IRealtimePresence.PresenceEventHandler | realtime-csharp",
    "summary": "Delegate IRealtimePresence.PresenceEventHandler Namespace Supabase.Realtime.Interfaces Assembly Supabase.Realtime.dll Delegate for a presence event. public delegate void IRealtimePresence.PresenceEventHandler(IRealtimePresence sender, IRealtimePresence.EventType eventType) Parameters sender IRealtimePresence Delegate for a presence event. eventType IRealtimePresence.EventType Delegate for a presence event."
  },
  "api/Supabase.Realtime.Interfaces.IRealtimePresence.html": {
    "href": "api/Supabase.Realtime.Interfaces.IRealtimePresence.html",
    "title": "Interface IRealtimePresence | realtime-csharp",
    "summary": "Interface IRealtimePresence Namespace Supabase.Realtime.Interfaces Assembly Supabase.Realtime.dll Contract representing a Realtime Presence class public interface IRealtimePresence Methods AddPresenceEventHandler(EventType, PresenceEventHandler) Add a presence event handler void AddPresenceEventHandler(IRealtimePresence.EventType eventType, IRealtimePresence.PresenceEventHandler handler) Parameters eventType IRealtimePresence.EventType handler IRealtimePresence.PresenceEventHandler ClearPresenceEventHandlers(EventType?) Clear presence events. void ClearPresenceEventHandlers(IRealtimePresence.EventType? eventType = null) Parameters eventType IRealtimePresence.EventType? RemovePresenceEventHandlers(EventType, PresenceEventHandler) Remove a presence event handler void RemovePresenceEventHandlers(IRealtimePresence.EventType eventType, IRealtimePresence.PresenceEventHandler handler) Parameters eventType IRealtimePresence.EventType handler IRealtimePresence.PresenceEventHandler Track(object?, int) Send an arbitrary payload as a presence event, MUST be called once to register this client as an active presence. Task<Push> Track(object? payload, int timeoutMs = 10000) Parameters payload object timeoutMs int Returns Task<Push> Untrack() Untracks a client Task<Push> Untrack() Returns Task<Push>"
  },
  "api/Supabase.Realtime.Interfaces.IRealtimePush-2.MessageEventHandler.html": {
    "href": "api/Supabase.Realtime.Interfaces.IRealtimePush-2.MessageEventHandler.html",
    "title": "Delegate IRealtimePush<TChannel, TSocketResponse>.MessageEventHandler | realtime-csharp",
    "summary": "Delegate IRealtimePush<TChannel, TSocketResponse>.MessageEventHandler Namespace Supabase.Realtime.Interfaces Assembly Supabase.Realtime.dll Delegate for a message event. public delegate void IRealtimePush<TChannel, TSocketResponse>.MessageEventHandler(IRealtimePush<TChannel, TSocketResponse> sender, TSocketResponse message) Parameters sender IRealtimePush<TChannel, TSocketResponse> Delegate for a message event. message TSocketResponse Delegate for a message event."
  },
  "api/Supabase.Realtime.Interfaces.IRealtimePush-2.html": {
    "href": "api/Supabase.Realtime.Interfaces.IRealtimePush-2.html",
    "title": "Interface IRealtimePush<TChannel, TSocketResponse> | realtime-csharp",
    "summary": "Interface IRealtimePush<TChannel, TSocketResponse> Namespace Supabase.Realtime.Interfaces Assembly Supabase.Realtime.dll Contract representing a \"Push\" or an outgoing message to the socket server public interface IRealtimePush<TChannel, TSocketResponse> where TChannel : IRealtimeChannel where TSocketResponse : IRealtimeSocketResponse Type Parameters TChannel TSocketResponse Properties Channel The calling or parent channel TChannel Channel { get; } Property Value TChannel EventName The event name this push is registered under. string EventName { get; } Property Value string IsSent Is push sent? bool IsSent { get; } Property Value bool Message The wrapped SocketRequest SocketRequest? Message { get; } Property Value SocketRequest Payload The payload (present in Message) object? Payload { get; } Property Value object Ref A unique ID representing this push. string? Ref { get; } Property Value string Response The server's response IRealtimeSocketResponse? Response { get; } Property Value IRealtimeSocketResponse Methods AddMessageReceivedHandler(MessageEventHandler) Add a message received handler void AddMessageReceivedHandler(IRealtimePush<TChannel, TSocketResponse>.MessageEventHandler handler) Parameters handler IRealtimePush<TChannel, TSocketResponse>.MessageEventHandler ClearMessageReceivedHandler() Clear Message received handlers. void ClearMessageReceivedHandler() RemoveMessageReceivedHandler(MessageEventHandler) Remove a message received handler void RemoveMessageReceivedHandler(IRealtimePush<TChannel, TSocketResponse>.MessageEventHandler handler) Parameters handler IRealtimePush<TChannel, TSocketResponse>.MessageEventHandler Resend(int) Resend this push, only called on a failed push attempt. void Resend(int timeoutMs = 10000) Parameters timeoutMs int Send() Send this push. void Send() Events OnTimeout A timeout event handler. event EventHandler? OnTimeout Event Type EventHandler"
  },
  "api/Supabase.Realtime.Interfaces.IRealtimeSocket.ErrorEventHandler.html": {
    "href": "api/Supabase.Realtime.Interfaces.IRealtimeSocket.ErrorEventHandler.html",
    "title": "Delegate IRealtimeSocket.ErrorEventHandler | realtime-csharp",
    "summary": "Delegate IRealtimeSocket.ErrorEventHandler Namespace Supabase.Realtime.Interfaces Assembly Supabase.Realtime.dll Delegate for errors on this socket public delegate void IRealtimeSocket.ErrorEventHandler(IRealtimeSocket sender, RealtimeException exception) Parameters sender IRealtimeSocket Delegate for errors on this socket exception RealtimeException Delegate for errors on this socket"
  },
  "api/Supabase.Realtime.Interfaces.IRealtimeSocket.HeartbeatEventHandler.html": {
    "href": "api/Supabase.Realtime.Interfaces.IRealtimeSocket.HeartbeatEventHandler.html",
    "title": "Delegate IRealtimeSocket.HeartbeatEventHandler | realtime-csharp",
    "summary": "Delegate IRealtimeSocket.HeartbeatEventHandler Namespace Supabase.Realtime.Interfaces Assembly Supabase.Realtime.dll Delegate for handling a heartbeat event. public delegate void IRealtimeSocket.HeartbeatEventHandler(IRealtimeSocket sender, SocketResponse heartbeat) Parameters sender IRealtimeSocket Delegate for handling a heartbeat event. heartbeat SocketResponse Delegate for handling a heartbeat event."
  },
  "api/Supabase.Realtime.Interfaces.IRealtimeSocket.MessageEventHandler.html": {
    "href": "api/Supabase.Realtime.Interfaces.IRealtimeSocket.MessageEventHandler.html",
    "title": "Delegate IRealtimeSocket.MessageEventHandler | realtime-csharp",
    "summary": "Delegate IRealtimeSocket.MessageEventHandler Namespace Supabase.Realtime.Interfaces Assembly Supabase.Realtime.dll Delegate for handling message received events. public delegate void IRealtimeSocket.MessageEventHandler(IRealtimeSocket sender, SocketResponse message) Parameters sender IRealtimeSocket Delegate for handling message received events. message SocketResponse Delegate for handling message received events."
  },
  "api/Supabase.Realtime.Interfaces.IRealtimeSocket.StateEventHandler.html": {
    "href": "api/Supabase.Realtime.Interfaces.IRealtimeSocket.StateEventHandler.html",
    "title": "Delegate IRealtimeSocket.StateEventHandler | realtime-csharp",
    "summary": "Delegate IRealtimeSocket.StateEventHandler Namespace Supabase.Realtime.Interfaces Assembly Supabase.Realtime.dll Delegate for handling socket state changes. public delegate void IRealtimeSocket.StateEventHandler(IRealtimeSocket sender, Constants.SocketState state) Parameters sender IRealtimeSocket Delegate for handling socket state changes. state Constants.SocketState Delegate for handling socket state changes."
  },
  "api/Supabase.Realtime.Interfaces.IRealtimeSocket.html": {
    "href": "api/Supabase.Realtime.Interfaces.IRealtimeSocket.html",
    "title": "Interface IRealtimeSocket | realtime-csharp",
    "summary": "Interface IRealtimeSocket Namespace Supabase.Realtime.Interfaces Assembly Supabase.Realtime.dll Contract for a realtime socket. public interface IRealtimeSocket : IGettableHeaders Inherited Members IGettableHeaders.GetHeaders Properties IsConnected Is this socket connected? bool IsConnected { get; } Property Value bool Methods AddErrorHandler(ErrorEventHandler) Add an error handler void AddErrorHandler(IRealtimeSocket.ErrorEventHandler handler) Parameters handler IRealtimeSocket.ErrorEventHandler AddHeartbeatHandler(HeartbeatEventHandler) Add a heartbeat handler. void AddHeartbeatHandler(IRealtimeSocket.HeartbeatEventHandler handler) Parameters handler IRealtimeSocket.HeartbeatEventHandler AddMessageReceivedHandler(MessageEventHandler) Add a message received handler. void AddMessageReceivedHandler(IRealtimeSocket.MessageEventHandler handler) Parameters handler IRealtimeSocket.MessageEventHandler AddStateChangedHandler(StateEventHandler) Add a state changed handler. void AddStateChangedHandler(IRealtimeSocket.StateEventHandler handler) Parameters handler IRealtimeSocket.StateEventHandler ClearErrorHandlers() Clear error handlers. void ClearErrorHandlers() ClearHeartbeatHandlers() Clear heartbeat handlers. void ClearHeartbeatHandlers() ClearMessageReceivedHandlers() Clear message received handlers. void ClearMessageReceivedHandlers() ClearStateChangedHandlers() Clear state changed handlers. void ClearStateChangedHandlers() Connect() Connects to a socket Task Connect() Returns Task Disconnect(WebSocketCloseStatus, string) Disconnects from a socket void Disconnect(WebSocketCloseStatus code = WebSocketCloseStatus.NormalClosure, string reason = \"\") Parameters code WebSocketCloseStatus reason string GetLatency() Gets the roundtrip time of a single message between client and server. Task<double> GetLatency() Returns Task<double> MakeMsgRef() Generates a Message ref, used in Push(SocketRequest) string MakeMsgRef() Returns string Push(SocketRequest) Push a SocketRequest to the Supabase.Realtime.Socket void Push(SocketRequest data) Parameters data SocketRequest RemoveErrorHandler(ErrorEventHandler) Remove an error handler void RemoveErrorHandler(IRealtimeSocket.ErrorEventHandler handler) Parameters handler IRealtimeSocket.ErrorEventHandler RemoveHeartbeatHandler(HeartbeatEventHandler) Remove heartbeat handler. void RemoveHeartbeatHandler(IRealtimeSocket.HeartbeatEventHandler handler) Parameters handler IRealtimeSocket.HeartbeatEventHandler RemoveMessageReceivedHandler(MessageEventHandler) Remove a message received handler. void RemoveMessageReceivedHandler(IRealtimeSocket.MessageEventHandler handler) Parameters handler IRealtimeSocket.MessageEventHandler RemoveStateChangedHandler(StateEventHandler) Remove a state changed handler. void RemoveStateChangedHandler(IRealtimeSocket.StateEventHandler handler) Parameters handler IRealtimeSocket.StateEventHandler"
  },
  "api/Supabase.Realtime.Interfaces.IRealtimeSocketResponse.html": {
    "href": "api/Supabase.Realtime.Interfaces.IRealtimeSocketResponse.html",
    "title": "Interface IRealtimeSocketResponse | realtime-csharp",
    "summary": "Interface IRealtimeSocketResponse Namespace Supabase.Realtime.Interfaces Assembly Supabase.Realtime.dll Contract for a socket response public interface IRealtimeSocketResponse Properties Event The parsed event type Constants.EventType Event { get; } Property Value Constants.EventType Payload The opinionated payload matching a SocketResponsePayload SocketResponsePayload? Payload { get; set; } Property Value SocketResponsePayload Ref The unique id of this response string? Ref { get; set; } Property Value string Topic The topic. string? Topic { get; set; } Property Value string _event The raw event name string? _event { get; set; } Property Value string"
  },
  "api/Supabase.Realtime.Interfaces.html": {
    "href": "api/Supabase.Realtime.Interfaces.html",
    "title": "Namespace Supabase.Realtime.Interfaces | realtime-csharp",
    "summary": "Namespace Supabase.Realtime.Interfaces Interfaces IRealtimeBroadcast A contract representing a realtime broadcast IRealtimeChannel A contract representing a realtime channel IRealtimeClient<TSocket, TChannel> Contract representing a Realtime Client IRealtimeDebugger Contract representing an internal debugger. IRealtimePresence Contract representing a Realtime Presence class IRealtimePush<TChannel, TSocketResponse> Contract representing a \"Push\" or an outgoing message to the socket server IRealtimeSocket Contract for a realtime socket. IRealtimeSocketResponse Contract for a socket response Enums IRealtimePresence.EventType Mapping of presence event types Delegates IRealtimeBroadcast.BroadcastEventHandler A delegate for broadcast events IRealtimeChannel.ErrorEventHandler Delegate for errors on this channel IRealtimeChannel.MessageReceivedHandler Delegate for messages received on this channel IRealtimeChannel.PostgresChangesHandler Delegate for postgres changes IRealtimeChannel.StateChangedHandler Delegate for channel state changes IRealtimeClient<TSocket, TChannel>.SocketStateEventHandler Delegate for handling a socket state event, this can be seen as synonymous with the Client's state. IRealtimeDebugger.DebugEventHandler A debug event handler IRealtimePresence.PresenceEventHandler Delegate for a presence event. IRealtimePush<TChannel, TSocketResponse>.MessageEventHandler Delegate for a message event. IRealtimeSocket.ErrorEventHandler Delegate for errors on this socket IRealtimeSocket.HeartbeatEventHandler Delegate for handling a heartbeat event. IRealtimeSocket.MessageEventHandler Delegate for handling message received events. IRealtimeSocket.StateEventHandler Delegate for handling socket state changes."
  },
  "api/Supabase.Realtime.Models.BaseBroadcast-1.html": {
    "href": "api/Supabase.Realtime.Models.BaseBroadcast-1.html",
    "title": "Class BaseBroadcast<T> | realtime-csharp",
    "summary": "Class BaseBroadcast<T> Namespace Supabase.Realtime.Models Assembly Supabase.Realtime.dll Represents a Broadcast response with a modeled payload. public class BaseBroadcast<T> : BaseBroadcast where T : class Type Parameters T Inheritance object BaseBroadcast BaseBroadcast<T> Inherited Members BaseBroadcast.Event object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Payload The typed payload. [JsonProperty(\"payload\")] public T? Payload { get; set; } Property Value T"
  },
  "api/Supabase.Realtime.Models.BaseBroadcast.html": {
    "href": "api/Supabase.Realtime.Models.BaseBroadcast.html",
    "title": "Class BaseBroadcast | realtime-csharp",
    "summary": "Class BaseBroadcast Namespace Supabase.Realtime.Models Assembly Supabase.Realtime.dll Represents an arbitrary Broadcast response. public class BaseBroadcast Inheritance object BaseBroadcast Derived BaseBroadcast<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Event The event. [JsonProperty(\"event\")] public string? Event { get; set; } Property Value string Payload The payload. [JsonProperty(\"payload\")] public Dictionary<string, object>? Payload { get; set; } Property Value Dictionary<string, object>"
  },
  "api/Supabase.Realtime.Models.BasePresence.html": {
    "href": "api/Supabase.Realtime.Models.BasePresence.html",
    "title": "Class BasePresence | realtime-csharp",
    "summary": "Class BasePresence Namespace Supabase.Realtime.Models Assembly Supabase.Realtime.dll Represents an arbitrary Presence response. public class BasePresence Inheritance object BasePresence Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties PhoenixPrevRef The previous ref for this presence event (can be used to establish sequence) [JsonProperty(\"phx_ref_prev\")] public string? PhoenixPrevRef { get; set; } Property Value string PhoenixRef The ref for this event. (can be used to establish sequence) [JsonProperty(\"phx_ref\")] public string? PhoenixRef { get; set; } Property Value string Methods ShouldSerializePhoenixPrevRef() Disables serialization of phoenix_prev_ref public bool ShouldSerializePhoenixPrevRef() Returns bool ShouldSerializePhoenixRef() Disables serialization of phoenix_ref public bool ShouldSerializePhoenixRef() Returns bool"
  },
  "api/Supabase.Realtime.Models.html": {
    "href": "api/Supabase.Realtime.Models.html",
    "title": "Namespace Supabase.Realtime.Models | realtime-csharp",
    "summary": "Namespace Supabase.Realtime.Models Classes BaseBroadcast Represents an arbitrary Broadcast response. BaseBroadcast<T> Represents a Broadcast response with a modeled payload. BasePresence Represents an arbitrary Presence response."
  },
  "api/Supabase.Realtime.PostgresChanges.PostgresChangesOptions.ListenType.html": {
    "href": "api/Supabase.Realtime.PostgresChanges.PostgresChangesOptions.ListenType.html",
    "title": "Enum PostgresChangesOptions.ListenType | realtime-csharp",
    "summary": "Enum PostgresChangesOptions.ListenType Namespace Supabase.Realtime.PostgresChanges Assembly Supabase.Realtime.dll Mapping of postgres changes listener types public enum PostgresChangesOptions.ListenType Fields [MapTo(\"*\", null)] All = 0 All event [MapTo(\"DELETE\", null)] Deletes = 3 DELETE events [MapTo(\"INSERT\", null)] Inserts = 1 INSERT events [MapTo(\"UPDATE\", null)] Updates = 2 UPDATE events"
  },
  "api/Supabase.Realtime.PostgresChanges.PostgresChangesOptions.html": {
    "href": "api/Supabase.Realtime.PostgresChanges.PostgresChangesOptions.html",
    "title": "Class PostgresChangesOptions | realtime-csharp",
    "summary": "Class PostgresChangesOptions Namespace Supabase.Realtime.PostgresChanges Assembly Supabase.Realtime.dll Handles a postgres_changes channel For Example in the js client: const databaseFilter = { schema: 'public', table: 'messages', filter: `room_id=eq.${channelId}`, event: 'INSERT', } Would translate to: new PostgresChangesOptions(\"public\", \"messages\", $\"room_id=eq.{channelId}\"); public class PostgresChangesOptions Inheritance object PostgresChangesOptions Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PostgresChangesOptions(string, string?, ListenType, string?, Dictionary<string, string>?) Postgres changes options. public PostgresChangesOptions(string schema, string? table = null, PostgresChangesOptions.ListenType eventType = ListenType.All, string? filter = null, Dictionary<string, string>? parameters = null) Parameters schema string table string eventType PostgresChangesOptions.ListenType filter string parameters Dictionary<string, string> Properties Event The stringified event listener type [JsonProperty(\"event\")] public string Event { get; } Property Value string Filter The filter for this listener [JsonProperty(\"filter\", NullValueHandling = NullValueHandling.Ignore)] public string? Filter { get; set; } Property Value string Parameters The parameters passed to the server [JsonProperty(\"parameters\", NullValueHandling = NullValueHandling.Ignore)] public Dictionary<string, string>? Parameters { get; set; } Property Value Dictionary<string, string> Schema The schema for this listener, likely: public [JsonProperty(\"schema\")] public string Schema { get; set; } Property Value string Table The table for this listener, can be: * matching all tables in schema. [JsonProperty(\"table\")] public string? Table { get; set; } Property Value string Methods Equals(object?) Check if object are equals public override bool Equals(object? obj) Parameters obj object Returns bool GetHashCode() Generate hash code public override int GetHashCode() Returns int"
  },
  "api/Supabase.Realtime.PostgresChanges.PostgresChangesPayload-1.html": {
    "href": "api/Supabase.Realtime.PostgresChanges.PostgresChangesPayload-1.html",
    "title": "Class PostgresChangesPayload<T> | realtime-csharp",
    "summary": "Class PostgresChangesPayload<T> Namespace Supabase.Realtime.PostgresChanges Assembly Supabase.Realtime.dll The payload. public class PostgresChangesPayload<T> where T : class Type Parameters T Inheritance object PostgresChangesPayload<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Data The payload data. [JsonProperty(\"data\")] public SocketResponsePayload<T>? Data { get; set; } Property Value SocketResponsePayload<T> Ids [JsonProperty(\"ids\")] public List<int?> Ids { get; set; } Property Value List<int?>"
  },
  "api/Supabase.Realtime.PostgresChanges.PostgresChangesResponse-1.html": {
    "href": "api/Supabase.Realtime.PostgresChanges.PostgresChangesResponse-1.html",
    "title": "Class PostgresChangesResponse<T> | realtime-csharp",
    "summary": "Class PostgresChangesResponse<T> Namespace Supabase.Realtime.PostgresChanges Assembly Supabase.Realtime.dll A SocketResponse with support for Generically typed Payload public class PostgresChangesResponse<T> : SocketResponse<PostgresChangesPayload<T>>, IRealtimeSocketResponse where T : class Type Parameters T Inheritance object SocketResponse SocketResponse<PostgresChangesPayload<T>> PostgresChangesResponse<T> Implements IRealtimeSocketResponse Inherited Members SocketResponse<PostgresChangesPayload<T>>.Payload SocketResponse.Topic SocketResponse._event SocketResponse.Event SocketResponse.Ref object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PostgresChangesResponse(JsonSerializerSettings) Represents a socket response public PostgresChangesResponse(JsonSerializerSettings serializerSettings) Parameters serializerSettings JsonSerializerSettings"
  },
  "api/Supabase.Realtime.PostgresChanges.PostgresChangesResponse.html": {
    "href": "api/Supabase.Realtime.PostgresChanges.PostgresChangesResponse.html",
    "title": "Class PostgresChangesResponse | realtime-csharp",
    "summary": "Class PostgresChangesResponse Namespace Supabase.Realtime.PostgresChanges Assembly Supabase.Realtime.dll A postgres changes event. public class PostgresChangesResponse : SocketResponse<PostgresChangesPayload<SocketResponsePayload>>, IRealtimeSocketResponse Inheritance object SocketResponse SocketResponse<PostgresChangesPayload<SocketResponsePayload>> PostgresChangesResponse Implements IRealtimeSocketResponse Inherited Members SocketResponse<PostgresChangesPayload<SocketResponsePayload>>.Payload SocketResponse.Topic SocketResponse._event SocketResponse.Event SocketResponse.Ref object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PostgresChangesResponse(JsonSerializerSettings) Represents a socket response public PostgresChangesResponse(JsonSerializerSettings serializerSettings) Parameters serializerSettings JsonSerializerSettings Methods Model<TModel>() Hydrates the referenced record into a Model (if possible). public virtual TModel? Model<TModel>() where TModel : BaseModel, new() Returns TModel Type Parameters TModel OldModel<TModel>() Hydrates the old_record into a Model (if possible). NOTE: If you want to receive the \"previous\" data for updates and deletes, you will need to set REPLICA IDENTITY to FULL, like this: ALTER TABLE your_table REPLICA IDENTITY FULL; public virtual TModel? OldModel<TModel>() where TModel : BaseModel, new() Returns TModel Type Parameters TModel"
  },
  "api/Supabase.Realtime.PostgresChanges.html": {
    "href": "api/Supabase.Realtime.PostgresChanges.html",
    "title": "Namespace Supabase.Realtime.PostgresChanges | realtime-csharp",
    "summary": "Namespace Supabase.Realtime.PostgresChanges Classes PostgresChangesOptions Handles a postgres_changes channel For Example in the js client: const databaseFilter = { schema: 'public', table: 'messages', filter: `room_id=eq.${channelId}`, event: 'INSERT', } Would translate to: new PostgresChangesOptions(\"public\", \"messages\", $\"room_id=eq.{channelId}\"); PostgresChangesPayload<T> The payload. PostgresChangesResponse A postgres changes event. PostgresChangesResponse<T> A SocketResponse with support for Generically typed Payload Enums PostgresChangesOptions.ListenType Mapping of postgres changes listener types"
  },
  "api/Supabase.Realtime.Presence.PresenceDiffPayload-1.html": {
    "href": "api/Supabase.Realtime.Presence.PresenceDiffPayload-1.html",
    "title": "Class PresenceDiffPayload<TPresence> | realtime-csharp",
    "summary": "Class PresenceDiffPayload<TPresence> Namespace Supabase.Realtime.Presence Assembly Supabase.Realtime.dll a Presence Diff payload public class PresenceDiffPayload<TPresence> where TPresence : BasePresence Type Parameters TPresence Inheritance object PresenceDiffPayload<TPresence> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Joins The joining presences. [JsonProperty(\"joins\")] public Dictionary<string, PresenceDiffPayloadMeta<TPresence>>? Joins { get; set; } Property Value Dictionary<string, PresenceDiffPayloadMeta<TPresence>> Leaves The leaving presences. [JsonProperty(\"leaves\")] public Dictionary<string, PresenceDiffPayloadMeta<TPresence>>? Leaves { get; set; } Property Value Dictionary<string, PresenceDiffPayloadMeta<TPresence>>"
  },
  "api/Supabase.Realtime.Presence.PresenceDiffPayloadMeta-1.html": {
    "href": "api/Supabase.Realtime.Presence.PresenceDiffPayloadMeta-1.html",
    "title": "Class PresenceDiffPayloadMeta<TPresence> | realtime-csharp",
    "summary": "Class PresenceDiffPayloadMeta<TPresence> Namespace Supabase.Realtime.Presence Assembly Supabase.Realtime.dll A presence diff payload public class PresenceDiffPayloadMeta<TPresence> where TPresence : BasePresence Type Parameters TPresence Inheritance object PresenceDiffPayloadMeta<TPresence> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Metas The metas containing current presences [JsonProperty(\"metas\")] public List<TPresence>? Metas { get; set; } Property Value List<TPresence>"
  },
  "api/Supabase.Realtime.Presence.PresenceOptions.html": {
    "href": "api/Supabase.Realtime.Presence.PresenceOptions.html",
    "title": "Class PresenceOptions | realtime-csharp",
    "summary": "Class PresenceOptions Namespace Supabase.Realtime.Presence Assembly Supabase.Realtime.dll Options used to initialize Realtime Presence public class PresenceOptions Inheritance object PresenceOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PresenceOptions(string) Presence options. public PresenceOptions(string presenceKey) Parameters presenceKey string Properties PresenceKey key option is used to track presence payload across clients [JsonProperty(\"key\")] public string PresenceKey { get; set; } Property Value string"
  },
  "api/Supabase.Realtime.Presence.RealtimePresenceDiff-1.html": {
    "href": "api/Supabase.Realtime.Presence.RealtimePresenceDiff-1.html",
    "title": "Class RealtimePresenceDiff<TPresence> | realtime-csharp",
    "summary": "Class RealtimePresenceDiff<TPresence> Namespace Supabase.Realtime.Presence Assembly Supabase.Realtime.dll Represents a presence_diff response public class RealtimePresenceDiff<TPresence> : SocketResponse<PresenceDiffPayload<TPresence>>, IRealtimeSocketResponse where TPresence : BasePresence Type Parameters TPresence Inheritance object SocketResponse SocketResponse<PresenceDiffPayload<TPresence>> RealtimePresenceDiff<TPresence> Implements IRealtimeSocketResponse Inherited Members SocketResponse<PresenceDiffPayload<TPresence>>.Payload SocketResponse.Topic SocketResponse._event SocketResponse.Event SocketResponse.Ref object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RealtimePresenceDiff(JsonSerializerSettings) Represents a socket response public RealtimePresenceDiff(JsonSerializerSettings serializerSettings) Parameters serializerSettings JsonSerializerSettings"
  },
  "api/Supabase.Realtime.Presence.Responses.PresenceStatePayload-1.html": {
    "href": "api/Supabase.Realtime.Presence.Responses.PresenceStatePayload-1.html",
    "title": "Class PresenceStatePayload<TPresence> | realtime-csharp",
    "summary": "Class PresenceStatePayload<TPresence> Namespace Supabase.Realtime.Presence.Responses Assembly Supabase.Realtime.dll A presence state payload response public class PresenceStatePayload<TPresence> where TPresence : BasePresence Type Parameters TPresence Inheritance object PresenceStatePayload<TPresence> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Metas The metas containing joins and leaves [JsonProperty(\"metas\")] public List<TPresence>? Metas { get; set; } Property Value List<TPresence>"
  },
  "api/Supabase.Realtime.Presence.Responses.PresenceStateSocketResponse-1.html": {
    "href": "api/Supabase.Realtime.Presence.Responses.PresenceStateSocketResponse-1.html",
    "title": "Class PresenceStateSocketResponse<TPresence> | realtime-csharp",
    "summary": "Class PresenceStateSocketResponse<TPresence> Namespace Supabase.Realtime.Presence.Responses Assembly Supabase.Realtime.dll A SocketResponse with support for Generically typed Payload public class PresenceStateSocketResponse<TPresence> : SocketResponse<Dictionary<string, PresenceStatePayload<TPresence>>>, IRealtimeSocketResponse where TPresence : BasePresence Type Parameters TPresence Inheritance object SocketResponse SocketResponse<Dictionary<string, PresenceStatePayload<TPresence>>> PresenceStateSocketResponse<TPresence> Implements IRealtimeSocketResponse Inherited Members SocketResponse<Dictionary<string, PresenceStatePayload<TPresence>>>.Payload SocketResponse.Topic SocketResponse._event SocketResponse.Event SocketResponse.Payload SocketResponse.Ref object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PresenceStateSocketResponse(JsonSerializerSettings) Represents a socket response public PresenceStateSocketResponse(JsonSerializerSettings serializerSettings) Parameters serializerSettings JsonSerializerSettings"
  },
  "api/Supabase.Realtime.Presence.Responses.html": {
    "href": "api/Supabase.Realtime.Presence.Responses.html",
    "title": "Namespace Supabase.Realtime.Presence.Responses | realtime-csharp",
    "summary": "Namespace Supabase.Realtime.Presence.Responses Classes PresenceStatePayload<TPresence> A presence state payload response PresenceStateSocketResponse<TPresence> A SocketResponse with support for Generically typed Payload"
  },
  "api/Supabase.Realtime.Presence.html": {
    "href": "api/Supabase.Realtime.Presence.html",
    "title": "Namespace Supabase.Realtime.Presence | realtime-csharp",
    "summary": "Namespace Supabase.Realtime.Presence Classes PresenceDiffPayloadMeta<TPresence> A presence diff payload PresenceDiffPayload<TPresence> a Presence Diff payload PresenceOptions Options used to initialize Realtime Presence RealtimePresenceDiff<TPresence> Represents a presence_diff response"
  },
  "api/Supabase.Realtime.RealtimeBroadcast-1.html": {
    "href": "api/Supabase.Realtime.RealtimeBroadcast-1.html",
    "title": "Class RealtimeBroadcast<TBroadcastModel> | realtime-csharp",
    "summary": "Class RealtimeBroadcast<TBroadcastModel> Namespace Supabase.Realtime Assembly Supabase.Realtime.dll Represents a realtime broadcast client. Broadcast follows the publish-subscribe pattern where a client publishes messages to a channel with a unique identifier. Other clients can elect to receive the message in real-time by subscribing to the channel with the same unique identifier. If these clients are online and subscribed then they will receive the message. Broadcast works by connecting your client to the nearest Realtime server, which will communicate with other servers to relay messages to other clients. A common use-case is sharing a user's cursor position with other clients in an online game. public class RealtimeBroadcast<TBroadcastModel> : IRealtimeBroadcast where TBroadcastModel : BaseBroadcast Type Parameters TBroadcastModel A model representing expected payload. Inheritance object RealtimeBroadcast<TBroadcastModel> Implements IRealtimeBroadcast Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RealtimeBroadcast(RealtimeChannel, BroadcastOptions, JsonSerializerSettings) Initializes a realtime broadcast helper class. public RealtimeBroadcast(RealtimeChannel channel, BroadcastOptions options, JsonSerializerSettings serializerSettings) Parameters channel RealtimeChannel options BroadcastOptions serializerSettings JsonSerializerSettings Methods AddBroadcastEventHandler(BroadcastEventHandler) Adds a broadcast event listener. public void AddBroadcastEventHandler(IRealtimeBroadcast.BroadcastEventHandler broadcastEventHandler) Parameters broadcastEventHandler IRealtimeBroadcast.BroadcastEventHandler ClearBroadcastEventHandlers() Clears all broadcast event listeners public void ClearBroadcastEventHandlers() Current() The last received broadcast. public TBroadcastModel? Current() Returns TBroadcastModel RemoveBroadcastEventHandler(BroadcastEventHandler) Removes a broadcast event listener. public void RemoveBroadcastEventHandler(IRealtimeBroadcast.BroadcastEventHandler broadcastEventHandler) Parameters broadcastEventHandler IRealtimeBroadcast.BroadcastEventHandler Send(string?, object, int) Broadcasts an arbitrary payload public Task<bool> Send(string? broadcastEventName, object payload, int timeoutMs = 10000) Parameters broadcastEventName string payload object timeoutMs int Returns Task<bool> TriggerReceived(SocketResponse) Called by RealtimeChannel when a broadcast event is received, then parsed/typed here. public void TriggerReceived(SocketResponse response) Parameters response SocketResponse Exceptions ArgumentException"
  },
  "api/Supabase.Realtime.RealtimeChannel.html": {
    "href": "api/Supabase.Realtime.RealtimeChannel.html",
    "title": "Class RealtimeChannel | realtime-csharp",
    "summary": "Class RealtimeChannel Namespace Supabase.Realtime Assembly Supabase.Realtime.dll Class representation of a channel subscription public class RealtimeChannel : IRealtimeChannel Inheritance object RealtimeChannel Implements IRealtimeChannel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RealtimeChannel(IRealtimeSocket, string, ChannelOptions) Initializes a Channel - must call Subscribe() to receive events. public RealtimeChannel(IRealtimeSocket socket, string channelName, ChannelOptions options) Parameters socket IRealtimeSocket channelName string options ChannelOptions Fields IsSubscribed Flag stating if a channel is currently subscribed. public bool IsSubscribed Field Value bool Properties BroadcastOptions The saved Broadcast Options, set in Register<TBroadcastResponse>(bool, bool) public BroadcastOptions? BroadcastOptions { get; } Property Value BroadcastOptions HasJoinedOnce Flag stating whether a channel has been joined once or not. public bool HasJoinedOnce { get; } Property Value bool IsClosed As to whether this Channel is Closed public bool IsClosed { get; } Property Value bool IsErrored As to if this Channel has Errored public bool IsErrored { get; } Property Value bool IsJoined As to if this Channel is currently Joined public bool IsJoined { get; } Property Value bool IsJoining As to if this Channel is currently Joining public bool IsJoining { get; } Property Value bool IsLeaving As to if this channel is currently leaving public bool IsLeaving { get; } Property Value bool Options Options passed to this channel instance. public ChannelOptions Options { get; } Property Value ChannelOptions PostgresChangesOptions The saved Postgres Changes Options, set in Register(PostgresChangesOptions) public List<PostgresChangesOptions> PostgresChangesOptions { get; } Property Value List<PostgresChangesOptions> PresenceOptions The saved Presence Options, set in Register<TPresenceResponse>(string) public PresenceOptions? PresenceOptions { get; } Property Value PresenceOptions State The Channel's current state. public Constants.ChannelState State { get; } Property Value Constants.ChannelState Topic The channel's topic (identifier) public string Topic { get; } Property Value string Methods AddErrorHandler(ErrorEventHandler) Adds an error event handler. public void AddErrorHandler(IRealtimeChannel.ErrorEventHandler handler) Parameters handler IRealtimeChannel.ErrorEventHandler AddMessageReceivedHandler(MessageReceivedHandler) Registers a message received listener, called when a socket message is received for this channel. public void AddMessageReceivedHandler(IRealtimeChannel.MessageReceivedHandler messageReceivedHandler) Parameters messageReceivedHandler IRealtimeChannel.MessageReceivedHandler AddPostgresChangeHandler(ListenType, PostgresChangesHandler) Add a postgres changes listener. Should be paired with Register(PostgresChangesOptions). public void AddPostgresChangeHandler(PostgresChangesOptions.ListenType listenType, IRealtimeChannel.PostgresChangesHandler postgresChangeHandler) Parameters listenType PostgresChangesOptions.ListenType The type of event this callback should process. postgresChangeHandler IRealtimeChannel.PostgresChangesHandler AddStateChangedHandler(StateChangedHandler) Registers a state changed listener relative to this channel. Called when channel state changes. public void AddStateChangedHandler(IRealtimeChannel.StateChangedHandler stateChangedHandler) Parameters stateChangedHandler IRealtimeChannel.StateChangedHandler Broadcast() Returns the IRealtimeBroadcast instance. public IRealtimeBroadcast? Broadcast() Returns IRealtimeBroadcast Broadcast<TBroadcastModel>() Returns a typed RealtimeBroadcast<TBroadcastModel> instance. public RealtimeBroadcast<TBroadcastModel>? Broadcast<TBroadcastModel>() where TBroadcastModel : BaseBroadcast Returns RealtimeBroadcast<TBroadcastModel> Type Parameters TBroadcastModel ClearErrorHandlers() Clears Error Event Handlers public void ClearErrorHandlers() ClearMessageReceivedHandlers() Clears message received listeners. public void ClearMessageReceivedHandlers() ClearPostgresChangeHandlers() Clears all postgres changes listeners. public void ClearPostgresChangeHandlers() ClearStateChangedHandlers() Clears all channel state changed listeners public void ClearStateChangedHandlers() Presence() Returns the IRealtimePresence instance. public IRealtimePresence? Presence() Returns IRealtimePresence Presence<TPresenceModel>() Returns a typed RealtimePresence<TPresenceModel> instance. public RealtimePresence<TPresenceModel>? Presence<TPresenceModel>() where TPresenceModel : BasePresence Returns RealtimePresence<TPresenceModel> Type Parameters TPresenceModel Model representing a Presence payload Push(string, string?, object?, int) Sends a Push request under this channel. Maintains a buffer in the event push is called prior to the channel being joined. public Push Push(string eventName, string? type = null, object? payload = null, int timeoutMs = 10000) Parameters eventName string type string payload object timeoutMs int Returns Push Register(PostgresChangesOptions) Registers postgres_changes options, can be called multiple times. Should be paired with AddPostgresChangeHandler(ListenType, PostgresChangesHandler) public IRealtimeChannel Register(PostgresChangesOptions postgresChangesOptions) Parameters postgresChangesOptions PostgresChangesOptions Returns IRealtimeChannel Register<TBroadcastResponse>(bool, bool) Registers a RealtimeBroadcast<TBroadcastModel> instance - allowing broadcast responses to be parsed. public RealtimeBroadcast<TBroadcastResponse> Register<TBroadcastResponse>(bool broadcastSelf = false, bool broadcastAck = false) where TBroadcastResponse : BaseBroadcast Parameters broadcastSelf bool enables client to receive message it has broadcast broadcastAck bool instructs server to acknowledge that broadcast message was received Returns RealtimeBroadcast<TBroadcastResponse> Type Parameters TBroadcastResponse Exceptions InvalidOperationException Register<TPresenceResponse>(string) Registers a RealtimePresence<TPresenceModel> instance - allowing presence responses to be parsed and state to be tracked. public RealtimePresence<TPresenceResponse> Register<TPresenceResponse>(string presenceKey) where TPresenceResponse : BasePresence Parameters presenceKey string used to track presence payload across clients Returns RealtimePresence<TPresenceResponse> Type Parameters TPresenceResponse The model representing a presence payload. Exceptions InvalidOperationException Thrown if called multiple times. Rejoin(int) Rejoins the channel. public void Rejoin(int timeoutMs = 10000) Parameters timeoutMs int RemoveErrorHandler(ErrorEventHandler) Removes an error event handler public void RemoveErrorHandler(IRealtimeChannel.ErrorEventHandler handler) Parameters handler IRealtimeChannel.ErrorEventHandler Exceptions NotImplementedException RemoveMessageReceivedHandler(MessageReceivedHandler) Removes a message received listener. public void RemoveMessageReceivedHandler(IRealtimeChannel.MessageReceivedHandler messageReceivedHandler) Parameters messageReceivedHandler IRealtimeChannel.MessageReceivedHandler RemovePostgresChangeHandler(ListenType, PostgresChangesHandler) Removes a postgres changes listener. public void RemovePostgresChangeHandler(PostgresChangesOptions.ListenType listenType, IRealtimeChannel.PostgresChangesHandler postgresChangeHandler) Parameters listenType PostgresChangesOptions.ListenType The type of event this callback was registered to process. postgresChangeHandler IRealtimeChannel.PostgresChangesHandler RemoveStateChangedHandler(StateChangedHandler) Removes a channel state changed listener public void RemoveStateChangedHandler(IRealtimeChannel.StateChangedHandler stateChangedHandler) Parameters stateChangedHandler IRealtimeChannel.StateChangedHandler Send(ChannelEventName, string?, object, int) Sends an arbitrary payload with a given payload type (Constants.ChannelEventName) public Task<bool> Send(Constants.ChannelEventName eventName, string? type, object payload, int timeoutMs = 10000) Parameters eventName Constants.ChannelEventName type string payload object timeoutMs int Returns Task<bool> Subscribe(int) Subscribes to the channel given supplied Options/params. public Task<IRealtimeChannel> Subscribe(int timeoutMs = 10000) Parameters timeoutMs int Returns Task<IRealtimeChannel> Unsubscribe() Unsubscribes from the channel. public IRealtimeChannel Unsubscribe() Returns IRealtimeChannel"
  },
  "api/Supabase.Realtime.RealtimePresence-1.html": {
    "href": "api/Supabase.Realtime.RealtimePresence-1.html",
    "title": "Class RealtimePresence<TPresenceModel> | realtime-csharp",
    "summary": "Class RealtimePresence<TPresenceModel> Namespace Supabase.Realtime Assembly Supabase.Realtime.dll Represents a realtime presence client. When a client subscribes to a channel, it will immediately receive the channel's latest state in a single message. Clients are free to come-and-go as they please, and as long as they are all subscribed to the same channel then they will all have the same Presence state as each other. If a client is suddenly disconnected (for example, they go offline), their state will be automatically removed from the shared state. public class RealtimePresence<TPresenceModel> : IRealtimePresence where TPresenceModel : BasePresence Type Parameters TPresenceModel A model representing expected payload. Inheritance object RealtimePresence<TPresenceModel> Implements IRealtimePresence Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RealtimePresence(RealtimeChannel, PresenceOptions, JsonSerializerSettings) Initializes a realtime presence helper class. public RealtimePresence(RealtimeChannel channel, PresenceOptions options, JsonSerializerSettings serializerSettings) Parameters channel RealtimeChannel options PresenceOptions serializerSettings JsonSerializerSettings Properties CurrentState The Current State of this Presence instance. public Dictionary<string, List<TPresenceModel>> CurrentState { get; } Property Value Dictionary<string, List<TPresenceModel>> LastState The Last State of this Presence instance. public Dictionary<string, List<TPresenceModel>> LastState { get; } Property Value Dictionary<string, List<TPresenceModel>> Methods AddPresenceEventHandler(EventType, PresenceEventHandler) Add presence event handler for a given event type. public void AddPresenceEventHandler(IRealtimePresence.EventType eventType, IRealtimePresence.PresenceEventHandler handler) Parameters eventType IRealtimePresence.EventType handler IRealtimePresence.PresenceEventHandler ClearPresenceEventHandlers(EventType?) Clears all event handlers for a given type (if specified) or clears all handlers. public void ClearPresenceEventHandlers(IRealtimePresence.EventType? eventType = null) Parameters eventType IRealtimePresence.EventType? RemovePresenceEventHandlers(EventType, PresenceEventHandler) Remove an event handler public void RemovePresenceEventHandlers(IRealtimePresence.EventType eventType, IRealtimePresence.PresenceEventHandler handler) Parameters eventType IRealtimePresence.EventType handler IRealtimePresence.PresenceEventHandler Track(object?, int) \"Tracks\" an event, used with Supabase.Realtime.Presence. public Task<Push> Track(object? payload, int timeoutMs = 10000) Parameters payload object timeoutMs int Returns Task<Push> TriggerDiff(SocketResponse) Triggers a diff comparison and emits events accordingly. public void TriggerDiff(SocketResponse response) Parameters response SocketResponse Exceptions ArgumentException TriggerSync(SocketResponse) Called in two cases: - By RealtimeChannel when it receives a presence_state initializing message. - By RealtimeChannel When a diff has been received and a new response is saved. public void TriggerSync(SocketResponse response) Parameters response SocketResponse Untrack() Untracks an event. public Task<Push> Untrack() Returns Task<Push>"
  },
  "api/Supabase.Realtime.RealtimeSocket.html": {
    "href": "api/Supabase.Realtime.RealtimeSocket.html",
    "title": "Class RealtimeSocket | realtime-csharp",
    "summary": "Class RealtimeSocket Namespace Supabase.Realtime Assembly Supabase.Realtime.dll Socket connection handler. public class RealtimeSocket : IDisposable, IRealtimeSocket, IGettableHeaders Inheritance object RealtimeSocket Implements IDisposable IRealtimeSocket IGettableHeaders Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RealtimeSocket(string, ClientOptions) Initializes this Socket instance. public RealtimeSocket(string endpoint, ClientOptions options) Parameters endpoint string options ClientOptions Properties GetHeaders An executable Func that returns a dictionary of headers to be appended onto a request. public Func<Dictionary<string, string>>? GetHeaders { get; set; } Property Value Func<Dictionary<string, string>> IsConnected Returns whether or not the connection is alive. public bool IsConnected { get; } Property Value bool Methods AddErrorHandler(ErrorEventHandler) Adds an error event handler. public void AddErrorHandler(IRealtimeSocket.ErrorEventHandler handler) Parameters handler IRealtimeSocket.ErrorEventHandler AddHeartbeatHandler(HeartbeatEventHandler) Adds a listener to be notified when a message is received. public void AddHeartbeatHandler(IRealtimeSocket.HeartbeatEventHandler handler) Parameters handler IRealtimeSocket.HeartbeatEventHandler AddMessageReceivedHandler(MessageEventHandler) Adds a listener to be notified when a message is received. public void AddMessageReceivedHandler(IRealtimeSocket.MessageEventHandler handler) Parameters handler IRealtimeSocket.MessageEventHandler AddStateChangedHandler(StateEventHandler) Adds a listener to be notified when the socket state changes. public void AddStateChangedHandler(IRealtimeSocket.StateEventHandler handler) Parameters handler IRealtimeSocket.StateEventHandler ClearErrorHandlers() Clears Error Event Handlers public void ClearErrorHandlers() ClearHeartbeatHandlers() Clears all of the listeners from receiving event state changes. public void ClearHeartbeatHandlers() ClearMessageReceivedHandlers() Clears all of the listeners from receiving event state changes. public void ClearMessageReceivedHandlers() ClearStateChangedHandlers() Clears all of the listeners from receiving event state changes. public void ClearStateChangedHandlers() Connect() Connects to a socket server and registers event listeners. public Task Connect() Returns Task Disconnect(WebSocketCloseStatus, string) Disconnects from the socket server. public void Disconnect(WebSocketCloseStatus code = WebSocketCloseStatus.NormalClosure, string reason = \"\") Parameters code WebSocketCloseStatus reason string GetLatency() Returns the latency (in millis) of roundtrip time from socket to server and back. public Task<double> GetLatency() Returns Task<double> MakeMsgRef() Generates an incrementing identifier for message references - this reference is used to coordinate requests with their responses. public string MakeMsgRef() Returns string Push(SocketRequest) Pushes formatted data to the socket server. If the connection is not alive, the data will be placed into a buffer to be sent when reconnected. public void Push(SocketRequest data) Parameters data SocketRequest RemoveErrorHandler(ErrorEventHandler) Removes an error event handler public void RemoveErrorHandler(IRealtimeSocket.ErrorEventHandler handler) Parameters handler IRealtimeSocket.ErrorEventHandler Exceptions NotImplementedException RemoveHeartbeatHandler(HeartbeatEventHandler) Removes a specified listener from messages received. public void RemoveHeartbeatHandler(IRealtimeSocket.HeartbeatEventHandler handler) Parameters handler IRealtimeSocket.HeartbeatEventHandler RemoveMessageReceivedHandler(MessageEventHandler) Removes a specified listener from messages received. public void RemoveMessageReceivedHandler(IRealtimeSocket.MessageEventHandler handler) Parameters handler IRealtimeSocket.MessageEventHandler RemoveStateChangedHandler(StateEventHandler) Removes a specified listener from socket state changes. public void RemoveStateChangedHandler(IRealtimeSocket.StateEventHandler handler) Parameters handler IRealtimeSocket.StateEventHandler ReplyEventName(string) Returns the expected reply event name based off a generated message ref. public string ReplyEventName(string msgRef) Parameters msgRef string Returns string"
  },
  "api/Supabase.Realtime.Socket.Responses.PhoenixPostgresChangeResponse.html": {
    "href": "api/Supabase.Realtime.Socket.Responses.PhoenixPostgresChangeResponse.html",
    "title": "Class PhoenixPostgresChangeResponse | realtime-csharp",
    "summary": "Class PhoenixPostgresChangeResponse Namespace Supabase.Realtime.Socket.Responses Assembly Supabase.Realtime.dll public class PhoenixPostgresChangeResponse Inheritance object PhoenixPostgresChangeResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties eventName [JsonProperty(\"event\")] public string? eventName { get; set; } Property Value string filter [JsonProperty(\"filter\")] public string? filter { get; set; } Property Value string id [JsonProperty(\"id\")] public int? id { get; set; } Property Value int? schema [JsonProperty(\"schema\")] public string? schema { get; set; } Property Value string table [JsonProperty(\"table\")] public string? table { get; set; } Property Value string"
  },
  "api/Supabase.Realtime.Socket.Responses.PhoenixResponse.html": {
    "href": "api/Supabase.Realtime.Socket.Responses.PhoenixResponse.html",
    "title": "Class PhoenixResponse | realtime-csharp",
    "summary": "Class PhoenixResponse Namespace Supabase.Realtime.Socket.Responses Assembly Supabase.Realtime.dll A generic, internal phoenix server response public class PhoenixResponse Inheritance object PhoenixResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Response The response. [JsonProperty(\"response\")] public PostgresChangeResponse? Response Field Value PostgresChangeResponse Status The status. [JsonProperty(\"status\")] public string? Status Field Value string"
  },
  "api/Supabase.Realtime.Socket.Responses.PostgresChangeResponse.html": {
    "href": "api/Supabase.Realtime.Socket.Responses.PostgresChangeResponse.html",
    "title": "Class PostgresChangeResponse | realtime-csharp",
    "summary": "Class PostgresChangeResponse Namespace Supabase.Realtime.Socket.Responses Assembly Supabase.Realtime.dll public class PostgresChangeResponse Inheritance object PostgresChangeResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties change [JsonProperty(\"postgres_changes\")] public List<PhoenixPostgresChangeResponse> change { get; set; } Property Value List<PhoenixPostgresChangeResponse>"
  },
  "api/Supabase.Realtime.Socket.Responses.html": {
    "href": "api/Supabase.Realtime.Socket.Responses.html",
    "title": "Namespace Supabase.Realtime.Socket.Responses | realtime-csharp",
    "summary": "Namespace Supabase.Realtime.Socket.Responses Classes PhoenixPostgresChangeResponse PhoenixResponse A generic, internal phoenix server response PostgresChangeResponse"
  },
  "api/Supabase.Realtime.Socket.SocketOptionsParameters.html": {
    "href": "api/Supabase.Realtime.Socket.SocketOptionsParameters.html",
    "title": "Class SocketOptionsParameters | realtime-csharp",
    "summary": "Class SocketOptionsParameters Namespace Supabase.Realtime.Socket Assembly Supabase.Realtime.dll Options to initialize a socket. public class SocketOptionsParameters Inheritance object SocketOptionsParameters Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ApiKey A Supabase hosted public key [JsonProperty(\"apikey\")] public string? ApiKey { get; set; } Property Value string Token A user token (used for WALRUS permissions) [JsonProperty(\"token\")] public string? Token { get; set; } Property Value string"
  },
  "api/Supabase.Realtime.Socket.SocketRequest.html": {
    "href": "api/Supabase.Realtime.Socket.SocketRequest.html",
    "title": "Class SocketRequest | realtime-csharp",
    "summary": "Class SocketRequest Namespace Supabase.Realtime.Socket Assembly Supabase.Realtime.dll Representation of a Socket Request, used by Push public class SocketRequest Inheritance object SocketRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Event The Event name [JsonProperty(\"event\")] public string? Event { get; set; } Property Value string JoinRef The join ref (if applicable) [JsonProperty(\"join_ref\", NullValueHandling = NullValueHandling.Ignore)] public string? JoinRef { get; set; } Property Value string Payload The json serializable payload [JsonProperty(\"payload\")] public object? Payload { get; set; } Property Value object Ref The unique ref for this request. [JsonProperty(\"ref\")] public string? Ref { get; set; } Property Value string Topic The topic being sent to [JsonProperty(\"topic\")] public string? Topic { get; set; } Property Value string Type The type [JsonProperty(\"type\", NullValueHandling = NullValueHandling.Ignore)] public string? Type { get; set; } Property Value string"
  },
  "api/Supabase.Realtime.Socket.SocketResponse-1.html": {
    "href": "api/Supabase.Realtime.Socket.SocketResponse-1.html",
    "title": "Class SocketResponse<T> | realtime-csharp",
    "summary": "Class SocketResponse<T> Namespace Supabase.Realtime.Socket Assembly Supabase.Realtime.dll A SocketResponse with support for Generically typed Payload public class SocketResponse<T> : SocketResponse, IRealtimeSocketResponse where T : class Type Parameters T Inheritance object SocketResponse SocketResponse<T> Implements IRealtimeSocketResponse Derived PostgresChangesResponse PostgresChangesResponse<T> RealtimePresenceDiff<TPresence> PresenceStateSocketResponse<TPresence> Inherited Members SocketResponse.Topic SocketResponse._event SocketResponse.Event SocketResponse.Ref object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SocketResponse(JsonSerializerSettings) Represents a socket response public SocketResponse(JsonSerializerSettings serializerSettings) Parameters serializerSettings JsonSerializerSettings Properties Payload The typed payload response [JsonProperty(\"payload\")] public T? Payload { get; set; } Property Value T"
  },
  "api/Supabase.Realtime.Socket.SocketResponse.html": {
    "href": "api/Supabase.Realtime.Socket.SocketResponse.html",
    "title": "Class SocketResponse | realtime-csharp",
    "summary": "Class SocketResponse Namespace Supabase.Realtime.Socket Assembly Supabase.Realtime.dll Representation of a Socket Response. public class SocketResponse : IRealtimeSocketResponse Inheritance object SocketResponse Implements IRealtimeSocketResponse Derived SocketResponse<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SocketResponse(JsonSerializerSettings) Represents a socket response public SocketResponse(JsonSerializerSettings serializerSettings) Parameters serializerSettings JsonSerializerSettings Properties Event The typed, parsed event given by this library. [JsonIgnore] public Constants.EventType Event { get; } Property Value Constants.EventType Payload The payload/response. [JsonProperty(\"payload\")] public SocketResponsePayload? Payload { get; set; } Property Value SocketResponsePayload Ref An internal reference to this particular feedback loop. [JsonProperty(\"ref\")] public string? Ref { get; set; } Property Value string Topic The internal realtime topic. [JsonProperty(\"topic\")] public string? Topic { get; set; } Property Value string _event The internal, raw event given by the socket [JsonProperty(\"event\")] public string? _event { get; set; } Property Value string"
  },
  "api/Supabase.Realtime.Socket.SocketResponsePayload-1.html": {
    "href": "api/Supabase.Realtime.Socket.SocketResponsePayload-1.html",
    "title": "Class SocketResponsePayload<T> | realtime-csharp",
    "summary": "Class SocketResponsePayload<T> Namespace Supabase.Realtime.Socket Assembly Supabase.Realtime.dll A socket response payload. public class SocketResponsePayload<T> : SocketResponsePayload where T : class Type Parameters T Inheritance object SocketResponsePayload SocketResponsePayload<T> Inherited Members SocketResponsePayload.Columns SocketResponsePayload.CommitTimestamp SocketResponsePayload.Schema SocketResponsePayload.Table SocketResponsePayload._type SocketResponsePayload.Type SocketResponsePayload.Status SocketResponsePayload.Response SocketResponsePayload.Errors SocketResponsePayload.Joins SocketResponsePayload.Leaves SocketResponsePayload.Channel SocketResponsePayload.Extension SocketResponsePayload.Message object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties OldRecord The previous state of the referenced record. [JsonProperty(\"old_record\")] public T? OldRecord { get; set; } Property Value T Record The record referenced. [JsonProperty(\"record\")] public T? Record { get; set; } Property Value T"
  },
  "api/Supabase.Realtime.Socket.SocketResponsePayload.html": {
    "href": "api/Supabase.Realtime.Socket.SocketResponsePayload.html",
    "title": "Class SocketResponsePayload | realtime-csharp",
    "summary": "Class SocketResponsePayload Namespace Supabase.Realtime.Socket Assembly Supabase.Realtime.dll A socket response payload. public class SocketResponsePayload Inheritance object SocketResponsePayload Derived SocketResponsePayload<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Channel The channel (system) [JsonProperty(\"channel\")] public string? Channel { get; set; } Property Value string Columns Displays Column information from the Database. Will always be an array but can be empty [JsonProperty(\"columns\")] public List<object>? Columns { get; set; } Property Value List<object> CommitTimestamp The timestamp of the commit referenced. Will either be a string or null [JsonProperty(\"commit_timestamp\")] public DateTimeOffset? CommitTimestamp { get; set; } Property Value DateTimeOffset? Errors Either null or an array of errors. See: https://github.com/supabase/walrus/#error-states [JsonProperty(\"errors\", NullValueHandling = NullValueHandling.Ignore)] public List<string>? Errors { get; set; } Property Value List<string> Extension The extension (system) [JsonProperty(\"extension\")] public string? Extension { get; set; } Property Value string Joins Presence joins (parsed later) [JsonProperty(\"joins\")] public object? Joins { get; set; } Property Value object Leaves Presence leaves (parsed later) [JsonProperty(\"leaves\")] public object? Leaves { get; set; } Property Value object Message The message (system) [JsonProperty(\"message\")] public string? Message { get; set; } Property Value string OldRecord The previous state of the referenced record. Will always be an object but can be empty. [JsonProperty(\"old_record\")] public object? OldRecord { get; set; } Property Value object Record The record referenced. Will always be an object but can be empty. [JsonProperty(\"record\")] public object? Record { get; set; } Property Value object Response The unparsed response object [JsonProperty(\"response\")] public object? Response { get; set; } Property Value object Schema The Schema affected. [JsonProperty(\"schema\")] public string? Schema { get; set; } Property Value string Status Status of response [JsonProperty(\"status\")] public string? Status { get; set; } Property Value string Table The Table affected. [JsonProperty(\"table\")] public string? Table { get; set; } Property Value string Type The parsed type. [JsonIgnore] public Constants.EventType Type { get; } Property Value Constants.EventType _type The action type performed (INSERT, UPDATE, DELETE, etc.) [JsonProperty(\"type\")] public string? _type { get; set; } Property Value string"
  },
  "api/Supabase.Realtime.Socket.html": {
    "href": "api/Supabase.Realtime.Socket.html",
    "title": "Namespace Supabase.Realtime.Socket | realtime-csharp",
    "summary": "Namespace Supabase.Realtime.Socket Classes SocketOptionsParameters Options to initialize a socket. SocketRequest Representation of a Socket Request, used by Push SocketResponse Representation of a Socket Response. SocketResponsePayload A socket response payload. SocketResponsePayload<T> A socket response payload. SocketResponse<T> A SocketResponse with support for Generically typed Payload"
  },
  "api/Supabase.Realtime.html": {
    "href": "api/Supabase.Realtime.html",
    "title": "Namespace Supabase.Realtime | realtime-csharp",
    "summary": "Namespace Supabase.Realtime Classes Binding Client Singleton that represents a Client connection to a Realtime Server. It maintains a singular Websocket with asynchronous listeners (RealtimeChannels). ClientOptions Options used when initializing a Client Constants Shared constants for Realtime RealtimeBroadcast<TBroadcastModel> Represents a realtime broadcast client. Broadcast follows the publish-subscribe pattern where a client publishes messages to a channel with a unique identifier. Other clients can elect to receive the message in real-time by subscribing to the channel with the same unique identifier. If these clients are online and subscribed then they will receive the message. Broadcast works by connecting your client to the nearest Realtime server, which will communicate with other servers to relay messages to other clients. A common use-case is sharing a user's cursor position with other clients in an online game. RealtimeChannel Class representation of a channel subscription RealtimePresence<TPresenceModel> Represents a realtime presence client. When a client subscribes to a channel, it will immediately receive the channel's latest state in a single message. Clients are free to come-and-go as they please, and as long as they are all subscribed to the same channel then they will all have the same Presence state as each other. If a client is suddenly disconnected (for example, they go offline), their state will be automatically removed from the shared state. RealtimeSocket Socket connection handler. Enums Constants.ChannelEventName Mapping for event names that can be used with Push(string, string?, object?, int) to send arbitrary data. This is unlikely to be used by the developer. Constants.ChannelState Mapping of channel states, used with RealtimeChannel Constants.EventType A channel event type used and parsed in a SocketResponse Constants.PresenceListenEventTypes Map of Presence listener types, used with: RealtimePresence<TPresenceModel> Constants.SocketState The Current Socket state, used in RealtimeSocket"
  },
  "index.html": {
    "href": "index.html",
    "title": "realtime-csharp | realtime-csharp",
    "summary": "realtime-csharp"
  }
}